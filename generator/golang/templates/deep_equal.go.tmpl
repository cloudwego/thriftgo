{{define "StructLikeDeepEqual"}}
{{- $TypeName := .GoName}}
func (p *{{$TypeName}}) DeepEqual(ano *{{$TypeName}}) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	{{- range .Fields}}
	if !p.{{.DeepEqual}}(ano.{{.GoName}}) {
		return false
	}
	{{- end}}
	return true
}
{{- end}}{{/* "StructLikeDeepEqual" */}}

{{define "StructLikeDeepEqualField"}}
{{- $TypeName := .GoName}}
{{- range .Fields}}
{{- $ctx := MkRWCtx .}}
func (p *{{$TypeName}}) {{.DeepEqual}}({{$ctx.Source}} {{$ctx.TypeName}}) bool {
	{{template "FieldDeepEqual" $ctx}}
	return true
}
{{- end}}{{/* range .Fields */}}
{{- end}}{{/* "StructLikeDeepEqualField" */}}

{{define "FieldDeepEqual"}}
{{- if .Type.Category.IsStructLike}}
	{{- template "FieldDeepEqualStructLike" .}}
{{- else if .Type.Category.IsContainerType}}
	{{- template "FieldDeepEqualContainer" .}}
{{- else}}{{/* IsBaseType */}}
	{{- template "FieldDeepEqualBase" .}}
{{- end}}
{{- end}}{{/* "FieldDeepEqual" */}}

{{define "FieldDeepEqualStructLike"}}
	if !{{.Target}}.DeepEqual({{.Source}}) {
		return false
	}
{{- end}}{{/* "FieldDeepEqualStructLike" */}}

{{define "FieldDeepEqualBase"}}
	{{- if .IsPointer}}
	if {{.Target}} == {{.Source}} {
		return true
	} else if {{.Target}} == nil || {{.Source}} == nil {
		return false
	}
	{{- end}}{{/* if .IsPointer */}}
	{{- $tgt := .Target}}
	{{- $src := .Source}}
	{{- if .IsPointer}}{{$tgt = printf "*%s" $tgt}}{{$src = printf "*%s" $src}}{{end}}
	{{- if .Type.Category.IsString}}
		{{- UseStdLibrary "strings"}}
		if strings.Compare({{$tgt}}, {{$src}}) != 0 {
			return false
		}
	{{- else if .Type.Category.IsBinary}}
		{{- UseStdLibrary "bytes"}}
		if bytes.Compare({{$tgt}}, {{$src}}) != 0 {
			return false
		}
	{{- else}}{{/* IsFixedLengthType */}}
		if {{$tgt}} != {{$src}} {
			return false
		}
	{{- end}}{{/* if .Type.Category.IsString */}}
{{- end}}{{/* "FieldDeepEqualBase" */}}

{{define "FieldDeepEqualContainer"}}
	{{- if .IsPointer}}
	if {{.Target}} == {{.Source}} {
		return true
	} else if {{.Target}} == nil || {{.Source}} == nil {
		return false
	}
	{{- end}}{{/* if .IsPointer */}}
	if len({{.Target}}) != len({{.Source}}) {
		return false
	}
	{{- $src := .GenID "_src"}}
	{{- $idx := "i"}}
	{{- if eq .Type.Category.String "Map" }}{{$idx = "k"}}{{end}}
	for {{$idx}}, v := range {{.Target}} {
		{{$src}} := {{.Source}}[{{$idx}}]
		{{- $ctx := (.ValCtx.WithTarget "v").WithSource $src}}
		{{- template "FieldDeepEqual" $ctx}}
	}
{{- end}}{{/* "FieldDeepEqualContainer" */}}
