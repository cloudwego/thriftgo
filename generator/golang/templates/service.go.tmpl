{{define "FunctionSignature"}}
{{- UseStdLibrary "context"}}
{{- $Function := .}}
{{- .GoName}}(ctx context.Context
	{{- range .Arguments -}}
		, {{.GoName}} {{.GoTypeName}}
	{{- end -}}
		) (
	{{- if not .Void}}r {{.ResponseGoTypeName}}, {{- end -}}
		err error)
{{- end}}{{/* define "FunctionSignature" */}}

{{define "Service"}}
{{- $BasePrefix := ServicePrefix .Base}}
{{- $BaseService := ServiceName .Base}}
{{- $ServiceName := .GoName}}
{{InsertionPoint "service" .Name}}
{{- if and Features.ReserveComments .ReservedComments}}{{.ReservedComments}}{{end}}
type {{$ServiceName}} interface {
	{{- if .Extends}}
	{{$BasePrefix}}{{$BaseService}}
	{{- end}}
	{{- range .Functions}}
	{{InsertionPoint "service" $.Name .Name}}
	{{- if and Features.ReserveComments .ReservedComments}}{{.ReservedComments}}{{end}}
	{{template "FunctionSignature" .}}
	{{- end}}
}
{{- end}}{{/* define "Service" */}}
