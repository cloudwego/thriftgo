// Copyright 2023 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by thriftgo (0.3.0). DO NOT EDIT.

package thrift_reflection_test

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/thrift_reflection"
)

const (
	MYCONST = "hello"

	MYINTCONST = 123

	MYFLOATCONST = 123.333

	MYBOOLCONST = true

	MYBYTECONST = 1
)

var (
	MYBINARYCONST = []byte("1")

	MYLISTCONST = []string{
		"a",
		"b",
		"c",
	}

	MYMAPCONST = map[string]string{
		"k1": "v1",
		"k2": "v2",
		"k3": "v3",
	}
)

type Gender int64

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
)

func (p Gender) String() string {
	switch p {
	case Gender_MALE:
		return "MALE"
	case Gender_FEMALE:
		return "FEMALE"
	}
	return "<UNSET>"
}

func GenderFromString(s string) (Gender, error) {
	switch s {
	case "MALE":
		return Gender_MALE, nil
	case "FEMALE":
		return Gender_FEMALE, nil
	}
	return Gender(0), fmt.Errorf("not a valid Gender string")
}

func GenderPtr(v Gender) *Gender { return &v }
func (p *Gender) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Gender(result.Int64)
	return
}

func (p *Gender) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Size int64

const (
	Size_S   Size = 0
	Size_M   Size = 1
	Size_L   Size = 2
	Size_XL  Size = 3
	Size_XXL Size = 4
)

func (p Size) String() string {
	switch p {
	case Size_S:
		return "S"
	case Size_M:
		return "M"
	case Size_L:
		return "L"
	case Size_XL:
		return "XL"
	case Size_XXL:
		return "XXL"
	}
	return "<UNSET>"
}

func SizeFromString(s string) (Size, error) {
	switch s {
	case "S":
		return Size_S, nil
	case "M":
		return Size_M, nil
	case "L":
		return Size_L, nil
	case "XL":
		return Size_XL, nil
	case "XXL":
		return Size_XXL, nil
	}
	return Size(0), fmt.Errorf("not a valid Size string")
}

func SizePtr(v Size) *Size { return &v }
func (p *Size) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Size(result.Int64)
	return
}

func (p *Size) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SpecialString = string

type SpecialPerson = Person

func NewSpecialPerson() *SpecialPerson {
	return (*SpecialPerson)(NewPerson())
}

type IDCard struct {
	Number string `thrift:"number,1,required" json:"number"`
	Age    int8   `thrift:"age,2,required" json:"age"`
}

func NewIDCard() *IDCard {
	return &IDCard{}
}

func (p *IDCard) GetNumber() (v string) {
	return p.Number
}

func (p *IDCard) GetAge() (v int8) {
	return p.Age
}

var fieldIDToName_IDCard = map[int16]string{
	1: "number",
	2: "age",
}

func (p *IDCard) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNumber bool = false
	var issetAge bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumber = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAge = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNumber {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAge {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IDCard[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_IDCard[fieldId]))
}

func (p *IDCard) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Number = v
	}
	return nil
}

func (p *IDCard) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Age = v
	}
	return nil
}

func (p *IDCard) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IDCard"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IDCard) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Number); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IDCard) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IDCard) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDCard(%+v)", *p)
}

type Person struct {
	Name         string        `thrift:"name,1,required" json:"name"`
	ID           *IDCard       `thrift:"id,2,required" json:"id"`
	Gender       Gender        `thrift:"gender,3,required" json:"gender"`
	Exp          *MyException  `thrift:"exp,4,required" json:"exp"`
	Uni          *MyUnion      `thrift:"uni,5,required" json:"uni"`
	TypedefValue SpecialString `thrift:"typedefValue,6,required" json:"typedefValue"`
	DefaultValue string        `thrift:"defaultValue,7,required" json:"defaultValue"`
	DefaultConst string        `thrift:"defaultConst,8,required" json:"defaultConst"`
}

func NewPerson() *Person {
	return &Person{

		DefaultValue: "123321",
		DefaultConst: MYCONST,
	}
}

func (p *Person) GetName() (v string) {
	return p.Name
}

var Person_ID_DEFAULT *IDCard

func (p *Person) GetID() (v *IDCard) {
	if !p.IsSetID() {
		return Person_ID_DEFAULT
	}
	return p.ID
}

func (p *Person) GetGender() (v Gender) {
	return p.Gender
}

var Person_Exp_DEFAULT *MyException

func (p *Person) GetExp() (v *MyException) {
	if !p.IsSetExp() {
		return Person_Exp_DEFAULT
	}
	return p.Exp
}

var Person_Uni_DEFAULT *MyUnion

func (p *Person) GetUni() (v *MyUnion) {
	if !p.IsSetUni() {
		return Person_Uni_DEFAULT
	}
	return p.Uni
}

func (p *Person) GetTypedefValue() (v SpecialString) {
	return p.TypedefValue
}

func (p *Person) GetDefaultValue() (v string) {
	return p.DefaultValue
}

func (p *Person) GetDefaultConst() (v string) {
	return p.DefaultConst
}

var fieldIDToName_Person = map[int16]string{
	1: "name",
	2: "id",
	3: "gender",
	4: "exp",
	5: "uni",
	6: "typedefValue",
	7: "defaultValue",
	8: "defaultConst",
}

func (p *Person) IsSetID() bool {
	return p.ID != nil
}

func (p *Person) IsSetExp() bool {
	return p.Exp != nil
}

func (p *Person) IsSetUni() bool {
	return p.Uni != nil
}

func (p *Person) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetID bool = false
	var issetGender bool = false
	var issetExp bool = false
	var issetUni bool = false
	var issetTypedefValue bool = false
	var issetDefaultValue bool = false
	var issetDefaultConst bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetGender = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetExp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetUni = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetTypedefValue = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetDefaultValue = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetDefaultConst = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetGender {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetExp {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetUni {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTypedefValue {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetDefaultValue {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetDefaultConst {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Person[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Person[fieldId]))
}

func (p *Person) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Person) ReadField2(iprot thrift.TProtocol) error {
	p.ID = NewIDCard()
	if err := p.ID.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Person) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Gender = Gender(v)
	}
	return nil
}

func (p *Person) ReadField4(iprot thrift.TProtocol) error {
	p.Exp = NewMyException()
	if err := p.Exp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Person) ReadField5(iprot thrift.TProtocol) error {
	p.Uni = NewMyUnion()
	if err := p.Uni.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Person) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TypedefValue = v
	}
	return nil
}

func (p *Person) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DefaultValue = v
	}
	return nil
}

func (p *Person) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DefaultConst = v
	}
	return nil
}

func (p *Person) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Person"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ID.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Person) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gender", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Gender)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Person) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exp", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Exp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Person) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uni", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Uni.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Person) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("typedefValue", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TypedefValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Person) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("defaultValue", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DefaultValue); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Person) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("defaultConst", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DefaultConst); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Person) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Person(%+v)", *p)
}

type A0 struct {
	F1 string             `thrift:"f1,1,required" json:"f1"`
	F2 *B                 `thrift:"f2,2,required" json:"f2"`
	F3 map[string]*C      `thrift:"f3,3,required" json:"f3"`
	F4 map[*D]map[*E][]*F `thrift:"f4,4,required" json:"f4"`
}

func NewA0() *A0 {
	return &A0{}
}

func (p *A0) GetF1() (v string) {
	return p.F1
}

var A0_F2_DEFAULT *B

func (p *A0) GetF2() (v *B) {
	if !p.IsSetF2() {
		return A0_F2_DEFAULT
	}
	return p.F2
}

func (p *A0) GetF3() (v map[string]*C) {
	return p.F3
}

func (p *A0) GetF4() (v map[*D]map[*E][]*F) {
	return p.F4
}

var fieldIDToName_A0 = map[int16]string{
	1: "f1",
	2: "f2",
	3: "f3",
	4: "f4",
}

func (p *A0) IsSetF2() bool {
	return p.F2 != nil
}

func (p *A0) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false
	var issetF2 bool = false
	var issetF3 bool = false
	var issetF4 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetF2 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetF3 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetF4 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetF2 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetF3 {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetF4 {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_A0[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_A0[fieldId]))
}

func (p *A0) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.F1 = v
	}
	return nil
}

func (p *A0) ReadField2(iprot thrift.TProtocol) error {
	p.F2 = NewB()
	if err := p.F2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *A0) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.F3 = make(map[string]*C, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewC()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.F3[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *A0) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.F4 = make(map[*D]map[*E][]*F, size)
	for i := 0; i < size; i++ {
		_key := NewD()
		if err := _key.Read(iprot); err != nil {
			return err
		}

		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return err
		}
		_val := make(map[*E][]*F, size)
		for i := 0; i < size; i++ {
			_key1 := NewE()
			if err := _key1.Read(iprot); err != nil {
				return err
			}

			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return err
			}
			_val1 := make([]*F, 0, size)
			for i := 0; i < size; i++ {
				_elem := NewF()
				if err := _elem.Read(iprot); err != nil {
					return err
				}

				_val1 = append(_val1, _elem)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return err
			}

			_val[_key1] = _val1
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return err
		}

		p.F4[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *A0) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("A0"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *A0) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.F1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *A0) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f2", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.F2.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *A0) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f3", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.F3)); err != nil {
		return err
	}
	for k, v := range p.F3 {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *A0) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f4", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.MAP, len(p.F4)); err != nil {
		return err
	}
	for k, v := range p.F4 {

		if err := k.Write(oprot); err != nil {
			return err
		}

		if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.LIST, len(v)); err != nil {
			return err
		}
		for k, v := range v {

			if err := k.Write(oprot); err != nil {
				return err
			}

			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *A0) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("A0(%+v)", *p)
}

type A1 struct {
	F1 string `thrift:"f1,1,required" json:"f1"`
	F2 *A2    `thrift:"f2,2,required" json:"f2"`
}

func NewA1() *A1 {
	return &A1{}
}

func (p *A1) GetF1() (v string) {
	return p.F1
}

var A1_F2_DEFAULT *A2

func (p *A1) GetF2() (v *A2) {
	if !p.IsSetF2() {
		return A1_F2_DEFAULT
	}
	return p.F2
}

var fieldIDToName_A1 = map[int16]string{
	1: "f1",
	2: "f2",
}

func (p *A1) IsSetF2() bool {
	return p.F2 != nil
}

func (p *A1) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false
	var issetF2 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetF2 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetF2 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_A1[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_A1[fieldId]))
}

func (p *A1) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.F1 = v
	}
	return nil
}

func (p *A1) ReadField2(iprot thrift.TProtocol) error {
	p.F2 = NewA2()
	if err := p.F2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *A1) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("A1"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *A1) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.F1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *A1) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f2", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.F2.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *A1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("A1(%+v)", *p)
}

type A2 struct {
	F1 string `thrift:"f1,1,required" json:"f1"`
}

func NewA2() *A2 {
	return &A2{}
}

func (p *A2) GetF1() (v string) {
	return p.F1
}

var fieldIDToName_A2 = map[int16]string{
	1: "f1",
}

func (p *A2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_A2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_A2[fieldId]))
}

func (p *A2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.F1 = v
	}
	return nil
}

func (p *A2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("A2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *A2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.F1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *A2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("A2(%+v)", *p)
}

type A3 struct {
	F1 string `thrift:"f1,1,required" json:"f1"`
}

func NewA3() *A3 {
	return &A3{}
}

func (p *A3) GetF1() (v string) {
	return p.F1
}

var fieldIDToName_A3 = map[int16]string{
	1: "f1",
}

func (p *A3) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_A3[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_A3[fieldId]))
}

func (p *A3) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.F1 = v
	}
	return nil
}

func (p *A3) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("A3"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *A3) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.F1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *A3) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("A3(%+v)", *p)
}

type B struct {
	F1 *B1 `thrift:"f1,1,required" json:"f1"`
	F2 *E  `thrift:"f2,2,required" json:"f2"`
}

func NewB() *B {
	return &B{}
}

var B_F1_DEFAULT *B1

func (p *B) GetF1() (v *B1) {
	if !p.IsSetF1() {
		return B_F1_DEFAULT
	}
	return p.F1
}

var B_F2_DEFAULT *E

func (p *B) GetF2() (v *E) {
	if !p.IsSetF2() {
		return B_F2_DEFAULT
	}
	return p.F2
}

var fieldIDToName_B = map[int16]string{
	1: "f1",
	2: "f2",
}

func (p *B) IsSetF1() bool {
	return p.F1 != nil
}

func (p *B) IsSetF2() bool {
	return p.F2 != nil
}

func (p *B) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false
	var issetF2 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetF2 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetF2 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_B[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_B[fieldId]))
}

func (p *B) ReadField1(iprot thrift.TProtocol) error {
	p.F1 = NewB1()
	if err := p.F1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *B) ReadField2(iprot thrift.TProtocol) error {
	p.F2 = NewE()
	if err := p.F2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *B) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("B"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *B) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.F1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *B) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f2", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.F2.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *B) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("B(%+v)", *p)
}

type B1 struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewB1() *B1 {
	return &B1{}
}

func (p *B1) GetName() (v string) {
	return p.Name
}

var fieldIDToName_B1 = map[int16]string{
	1: "name",
}

func (p *B1) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_B1[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_B1[fieldId]))
}

func (p *B1) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *B1) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("B1"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *B1) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *B1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("B1(%+v)", *p)
}

type C struct {
	F1 *B `thrift:"f1,1,required" json:"f1"`
}

func NewC() *C {
	return &C{}
}

var C_F1_DEFAULT *B

func (p *C) GetF1() (v *B) {
	if !p.IsSetF1() {
		return C_F1_DEFAULT
	}
	return p.F1
}

var fieldIDToName_C = map[int16]string{
	1: "f1",
}

func (p *C) IsSetF1() bool {
	return p.F1 != nil
}

func (p *C) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_C[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_C[fieldId]))
}

func (p *C) ReadField1(iprot thrift.TProtocol) error {
	p.F1 = NewB()
	if err := p.F1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *C) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("C"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *C) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.F1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *C) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("C(%+v)", *p)
}

type D struct {
	F1 map[*D1]*D2 `thrift:"f1,1,required" json:"f1"`
}

func NewD() *D {
	return &D{}
}

func (p *D) GetF1() (v map[*D1]*D2) {
	return p.F1
}

var fieldIDToName_D = map[int16]string{
	1: "f1",
}

func (p *D) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_D[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_D[fieldId]))
}

func (p *D) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.F1 = make(map[*D1]*D2, size)
	for i := 0; i < size; i++ {
		_key := NewD1()
		if err := _key.Read(iprot); err != nil {
			return err
		}
		_val := NewD2()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.F1[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *D) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("D"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *D) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRUCT, thrift.STRUCT, len(p.F1)); err != nil {
		return err
	}
	for k, v := range p.F1 {

		if err := k.Write(oprot); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *D) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("D(%+v)", *p)
}

type D1 struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewD1() *D1 {
	return &D1{}
}

func (p *D1) GetName() (v string) {
	return p.Name
}

var fieldIDToName_D1 = map[int16]string{
	1: "name",
}

func (p *D1) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_D1[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_D1[fieldId]))
}

func (p *D1) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *D1) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("D1"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *D1) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *D1) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("D1(%+v)", *p)
}

type D2 struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewD2() *D2 {
	return &D2{}
}

func (p *D2) GetName() (v string) {
	return p.Name
}

var fieldIDToName_D2 = map[int16]string{
	1: "name",
}

func (p *D2) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_D2[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_D2[fieldId]))
}

func (p *D2) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *D2) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("D2"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *D2) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *D2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("D2(%+v)", *p)
}

type E struct {
	F1 *C `thrift:"f1,1,required" json:"f1"`
}

func NewE() *E {
	return &E{}
}

var E_F1_DEFAULT *C

func (p *E) GetF1() (v *C) {
	if !p.IsSetF1() {
		return E_F1_DEFAULT
	}
	return p.F1
}

var fieldIDToName_E = map[int16]string{
	1: "f1",
}

func (p *E) IsSetF1() bool {
	return p.F1 != nil
}

func (p *E) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetF1 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetF1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetF1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_E[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_E[fieldId]))
}

func (p *E) ReadField1(iprot thrift.TProtocol) error {
	p.F1 = NewC()
	if err := p.F1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *E) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("E"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *E) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("f1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.F1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *E) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("E(%+v)", *p)
}

type F struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewF() *F {
	return &F{}
}

func (p *F) GetName() (v string) {
	return p.Name
}

var fieldIDToName_F = map[int16]string{
	1: "name",
}

func (p *F) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_F[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_F[fieldId]))
}

func (p *F) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *F) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("F"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *F) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *F) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("F(%+v)", *p)
}

type MyUnion struct {
	Number *string `thrift:"number,1,optional" json:"number,omitempty"`
	Age    *int8   `thrift:"age,2,optional" json:"age,omitempty"`
}

func NewMyUnion() *MyUnion {
	return &MyUnion{}
}

var MyUnion_Number_DEFAULT string

func (p *MyUnion) GetNumber() (v string) {
	if !p.IsSetNumber() {
		return MyUnion_Number_DEFAULT
	}
	return *p.Number
}

var MyUnion_Age_DEFAULT int8

func (p *MyUnion) GetAge() (v int8) {
	if !p.IsSetAge() {
		return MyUnion_Age_DEFAULT
	}
	return *p.Age
}

func (p *MyUnion) CountSetFieldsMyUnion() int {
	count := 0
	if p.IsSetNumber() {
		count++
	}
	if p.IsSetAge() {
		count++
	}
	return count
}

var fieldIDToName_MyUnion = map[int16]string{
	1: "number",
	2: "age",
}

func (p *MyUnion) IsSetNumber() bool {
	return p.Number != nil
}

func (p *MyUnion) IsSetAge() bool {
	return p.Age != nil
}

func (p *MyUnion) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyUnion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyUnion) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Number = &v
	}
	return nil
}

func (p *MyUnion) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Age = &v
	}
	return nil
}

func (p *MyUnion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	var c int
	if c = p.CountSetFieldsMyUnion(); c != 1 {
		goto CountSetFieldsError
	}
	if err = oprot.WriteStructBegin("MyUnion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
CountSetFieldsError:
	return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyUnion) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumber() {
		if err = oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Number); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MyUnion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAge() {
		if err = oprot.WriteFieldBegin("age", thrift.BYTE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteByte(*p.Age); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MyUnion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyUnion(%+v)", *p)
}

type MyException struct {
	Msg  string `thrift:"msg,1,required" json:"msg"`
	Code int8   `thrift:"code,2,required" json:"code"`
}

func NewMyException() *MyException {
	return &MyException{}
}

func (p *MyException) GetMsg() (v string) {
	return p.Msg
}

func (p *MyException) GetCode() (v int8) {
	return p.Code
}

var fieldIDToName_MyException = map[int16]string{
	1: "msg",
	2: "code",
}

func (p *MyException) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMsg bool = false
	var issetCode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMsg {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCode {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyException[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MyException[fieldId]))
}

func (p *MyException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MyException) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *MyException) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MyException"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyException) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MyException) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MyException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyException(%+v)", *p)
}
func (p *MyException) Error() string {
	return p.String()
}

type MyService interface {
	M1(ctx context.Context, p_ *Person) (r string, err error)

	M2(ctx context.Context, p2 *Person) (r string, err error)

	M3(ctx context.Context, a0 *A0, a3 *A3) (r *A1, err error)
}

type MyServiceClient struct {
	c thrift.TClient
}

func NewMyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MyServiceClient {
	return &MyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MyServiceClient {
	return &MyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMyServiceClient(c thrift.TClient) *MyServiceClient {
	return &MyServiceClient{
		c: c,
	}
}

func (p *MyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MyServiceClient) M1(ctx context.Context, p_ *Person) (r string, err error) {
	var _args MyServiceM1Args
	_args.P = p_
	var _result MyServiceM1Result
	if err = p.Client_().Call(ctx, "M1", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MyServiceClient) M2(ctx context.Context, p2 *Person) (r string, err error) {
	var _args MyServiceM2Args
	_args.P2 = p2
	var _result MyServiceM2Result
	if err = p.Client_().Call(ctx, "M2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MyServiceClient) M3(ctx context.Context, a0 *A0, a3 *A3) (r *A1, err error) {
	var _args MyServiceM3Args
	_args.A0 = a0
	_args.A3 = a3
	var _result MyServiceM3Result
	if err = p.Client_().Call(ctx, "M3", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MyService
}

func (p *MyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
	self := &MyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("M1", &myServiceProcessorM1{handler: handler})
	self.AddToProcessorMap("M2", &myServiceProcessorM2{handler: handler})
	self.AddToProcessorMap("M3", &myServiceProcessorM3{handler: handler})
	return self
}
func (p *MyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type myServiceProcessorM1 struct {
	handler MyService
}

func (p *myServiceProcessorM1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MyServiceM1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("M1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MyServiceM1Result{}
	var retval string
	if retval, err2 = p.handler.M1(ctx, args.P); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing M1: "+err2.Error())
		oprot.WriteMessageBegin("M1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("M1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type myServiceProcessorM2 struct {
	handler MyService
}

func (p *myServiceProcessorM2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MyServiceM2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("M2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MyServiceM2Result{}
	var retval string
	if retval, err2 = p.handler.M2(ctx, args.P2); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing M2: "+err2.Error())
		oprot.WriteMessageBegin("M2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("M2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type myServiceProcessorM3 struct {
	handler MyService
}

func (p *myServiceProcessorM3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MyServiceM3Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("M3", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MyServiceM3Result{}
	var retval *A1
	if retval, err2 = p.handler.M3(ctx, args.A0, args.A3); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing M3: "+err2.Error())
		oprot.WriteMessageBegin("M3", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("M3", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MyServiceM1Args struct {
	P *Person `thrift:"p,1,required" json:"p"`
}

func NewMyServiceM1Args() *MyServiceM1Args {
	return &MyServiceM1Args{}
}

var MyServiceM1Args_P_DEFAULT *Person

func (p *MyServiceM1Args) GetP() (v *Person) {
	if !p.IsSetP() {
		return MyServiceM1Args_P_DEFAULT
	}
	return p.P
}

var fieldIDToName_MyServiceM1Args = map[int16]string{
	1: "p",
}

func (p *MyServiceM1Args) IsSetP() bool {
	return p.P != nil
}

func (p *MyServiceM1Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetP bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetP = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetP {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM1Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MyServiceM1Args[fieldId]))
}

func (p *MyServiceM1Args) ReadField1(iprot thrift.TProtocol) error {
	p.P = NewPerson()
	if err := p.P.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MyServiceM1Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M1_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("p", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.P.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MyServiceM1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM1Args(%+v)", *p)
}

type MyServiceM1Result struct {
	Success *string `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewMyServiceM1Result() *MyServiceM1Result {
	return &MyServiceM1Result{}
}

var MyServiceM1Result_Success_DEFAULT string

func (p *MyServiceM1Result) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return MyServiceM1Result_Success_DEFAULT
	}
	return *p.Success
}

var fieldIDToName_MyServiceM1Result = map[int16]string{
	0: "success",
}

func (p *MyServiceM1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceM1Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM1Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM1Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MyServiceM1Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M1_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MyServiceM1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM1Result(%+v)", *p)
}

type MyServiceM2Args struct {
	P2 *Person `thrift:"p2,1,required" json:"p2"`
}

func NewMyServiceM2Args() *MyServiceM2Args {
	return &MyServiceM2Args{}
}

var MyServiceM2Args_P2_DEFAULT *Person

func (p *MyServiceM2Args) GetP2() (v *Person) {
	if !p.IsSetP2() {
		return MyServiceM2Args_P2_DEFAULT
	}
	return p.P2
}

var fieldIDToName_MyServiceM2Args = map[int16]string{
	1: "p2",
}

func (p *MyServiceM2Args) IsSetP2() bool {
	return p.P2 != nil
}

func (p *MyServiceM2Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetP2 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetP2 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetP2 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM2Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MyServiceM2Args[fieldId]))
}

func (p *MyServiceM2Args) ReadField1(iprot thrift.TProtocol) error {
	p.P2 = NewPerson()
	if err := p.P2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MyServiceM2Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M2_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("p2", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.P2.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MyServiceM2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM2Args(%+v)", *p)
}

type MyServiceM2Result struct {
	Success *string `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewMyServiceM2Result() *MyServiceM2Result {
	return &MyServiceM2Result{}
}

var MyServiceM2Result_Success_DEFAULT string

func (p *MyServiceM2Result) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return MyServiceM2Result_Success_DEFAULT
	}
	return *p.Success
}

var fieldIDToName_MyServiceM2Result = map[int16]string{
	0: "success",
}

func (p *MyServiceM2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceM2Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM2Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM2Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MyServiceM2Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M2_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MyServiceM2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM2Result(%+v)", *p)
}

type MyServiceM3Args struct {
	A0 *A0 `thrift:"a0,1,required" json:"a0"`
	A3 *A3 `thrift:"a3,2,required" json:"a3"`
}

func NewMyServiceM3Args() *MyServiceM3Args {
	return &MyServiceM3Args{}
}

var MyServiceM3Args_A0_DEFAULT *A0

func (p *MyServiceM3Args) GetA0() (v *A0) {
	if !p.IsSetA0() {
		return MyServiceM3Args_A0_DEFAULT
	}
	return p.A0
}

var MyServiceM3Args_A3_DEFAULT *A3

func (p *MyServiceM3Args) GetA3() (v *A3) {
	if !p.IsSetA3() {
		return MyServiceM3Args_A3_DEFAULT
	}
	return p.A3
}

var fieldIDToName_MyServiceM3Args = map[int16]string{
	1: "a0",
	2: "a3",
}

func (p *MyServiceM3Args) IsSetA0() bool {
	return p.A0 != nil
}

func (p *MyServiceM3Args) IsSetA3() bool {
	return p.A3 != nil
}

func (p *MyServiceM3Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetA0 bool = false
	var issetA3 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetA0 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetA3 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetA0 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetA3 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM3Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MyServiceM3Args[fieldId]))
}

func (p *MyServiceM3Args) ReadField1(iprot thrift.TProtocol) error {
	p.A0 = NewA0()
	if err := p.A0.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MyServiceM3Args) ReadField2(iprot thrift.TProtocol) error {
	p.A3 = NewA3()
	if err := p.A3.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MyServiceM3Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M3_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM3Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a0", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.A0.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MyServiceM3Args) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("a3", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.A3.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MyServiceM3Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM3Args(%+v)", *p)
}

type MyServiceM3Result struct {
	Success *A1 `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewMyServiceM3Result() *MyServiceM3Result {
	return &MyServiceM3Result{}
}

var MyServiceM3Result_Success_DEFAULT *A1

func (p *MyServiceM3Result) GetSuccess() (v *A1) {
	if !p.IsSetSuccess() {
		return MyServiceM3Result_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_MyServiceM3Result = map[int16]string{
	0: "success",
}

func (p *MyServiceM3Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceM3Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM3Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM3Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewA1()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MyServiceM3Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M3_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM3Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MyServiceM3Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM3Result(%+v)", *p)
}

var file_reflection_test_idl_thrift_go_types = []interface{}{
	(*IDCard)(nil),      // Struct 0: thrift_reflection_test.IDCard
	(*Person)(nil),      // Struct 1: thrift_reflection_test.Person
	(*A0)(nil),          // Struct 2: thrift_reflection_test.A0
	(*A1)(nil),          // Struct 3: thrift_reflection_test.A1
	(*A2)(nil),          // Struct 4: thrift_reflection_test.A2
	(*A3)(nil),          // Struct 5: thrift_reflection_test.A3
	(*B)(nil),           // Struct 6: thrift_reflection_test.B
	(*B1)(nil),          // Struct 7: thrift_reflection_test.B1
	(*C)(nil),           // Struct 8: thrift_reflection_test.C
	(*D)(nil),           // Struct 9: thrift_reflection_test.D
	(*D1)(nil),          // Struct 10: thrift_reflection_test.D1
	(*D2)(nil),          // Struct 11: thrift_reflection_test.D2
	(*E)(nil),           // Struct 12: thrift_reflection_test.E
	(*F)(nil),           // Struct 13: thrift_reflection_test.F
	(*MyUnion)(nil),     // Union 0: thrift_reflection_test.MyUnion
	(*MyException)(nil), // Exception 0: thrift_reflection_test.MyException
	(*Gender)(nil),      // Enum 0: thrift_reflection_test.Gender
	(*Size)(nil),        // Enum 1: thrift_reflection_test.Size
}
var file_reflection_test_idl_thrift *thrift_reflection.FileDescriptor
var file_idl_reflection_test_idl_rawDesc = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xdc, 0x59, 0xc1, 0x8e, 0xe2, 0x46,
	0x10, 0x2d, 0xb7, 0xd, 0xc3, 0x2e, 0xb0, 0x24, 0x91, 0xb2, 0x87, 0x9c, 0xac, 0x7c, 0x40, 0x66,
	0xc, 0xab, 0x28, 0x52, 0x2e, 0x1, 0xdb, 0x44, 0x23, 0xe1, 0x61, 0xb5, 0x4c, 0xa2, 0x25, 0x87,
	0x20, 0x83, 0x1b, 0xc6, 0x1a, 0x63, 0x13, 0x63, 0x56, 0x4b, 0xf2, 0xf, 0x39, 0x26, 0xa7, 0x1c,
	0xf3, 0x7, 0xc9, 0x35, 0x7f, 0x91, 0x73, 0x2e, 0x51, 0x94, 0xfc, 0x45, 0x64, 0x1b, 0xf, 0xc,
	0x30, 0x50, 0xe5, 0xb1, 0x77, 0x56, 0x3b, 0x97, 0x41, 0x76, 0x57, 0xf5, 0x7b, 0xaf, 0xab, 0xaa,
	0xdb, 0xd5, 0x65, 0x10, 0x0, 0xe0, 0x23, 0x9f, 0x8f, 0x1d, 0x3e, 0xa, 0x6c, 0xcf, 0x1d, 0x4,
	0x7c, 0x1e, 0xc, 0x6c, 0xcb, 0xf9, 0x24, 0xb8, 0xf2, 0xed, 0x71, 0x50, 0x5, 0x56, 0x2e, 0x3,
	0x0, 0x54, 0x41, 0x8c, 0x7e, 0x84, 0xe3, 0xd9, 0xc4, 0x3, 0x80, 0xa7, 0xf1, 0x88, 0xc1, 0x96,
	0x71, 0xd, 0xa4, 0x4a, 0x38, 0xee, 0xa8, 0xeb, 0x32, 0x30, 0x0, 0x78, 0x64, 0x2c, 0x7b, 0xdc,
	0x7f, 0x65, 0x8f, 0x78, 0xd, 0xc4, 0xd0, 0x50, 0x44, 0x1a, 0x32, 0x43, 0xa9, 0xa0, 0x7, 0x17,
	0xe7, 0x81, 0x6f, 0xbb, 0x13, 0x20, 0x82, 0x13, 0x66, 0x84, 0x29, 0x9e, 0x73, 0x7f, 0xee, 0xb9,
	0x50, 0x6, 0x9, 0x0, 0x4a, 0x2f, 0xf8, 0x77, 0xb, 0xdb, 0xe7, 0x56, 0x9, 0xa, 0xa1, 0xa3,
	0x2a, 0x9c, 0x94, 0x6b, 0xa1, 0x8e, 0x65, 0x28, 0x41, 0xac, 0x67, 0x21, 0x79, 0x50, 0xc, 0xff,
	0xd5, 0xe0, 0x24, 0x44, 0x6, 0x2c, 0x7c, 0x8f, 0x96, 0xa0, 0x9e, 0xbb, 0x4, 0x6c, 0x46, 0x99,
	0xe3, 0x21, 0x34, 0x68, 0xe0, 0xf1, 0xb1, 0xa6, 0x92, 0xf0, 0x67, 0x58, 0x13, 0xf3, 0x8c, 0xe2,
	0xff, 0xc, 0xcb, 0x1d, 0x3d, 0x3d, 0x89, 0x5e, 0x63, 0xff, 0xf4, 0x8c, 0x26, 0x7d, 0x15, 0xa4,
	0xe4, 0x65, 0x1, 0xe2, 0xb7, 0x85, 0xf0, 0xed, 0x13, 0x6c, 0x18, 0x9c, 0x6b, 0xaa, 0xe9, 0x5b,
	0xab, 0x84, 0xc6, 0x2a, 0x5d, 0x74, 0x17, 0xd3, 0x21, 0xf7, 0xe9, 0x11, 0x9d, 0xad, 0xe2, 0xa2,
	0x39, 0xe1, 0x4, 0xc9, 0xed, 0xcf, 0xf0, 0x92, 0x6f, 0xa9, 0x4a, 0x4b, 0xaa, 0x95, 0x9a, 0x25,
	0xa4, 0x95, 0xe4, 0x9a, 0x53, 0x2, 0xf, 0x9c, 0x96, 0xa1, 0x2b, 0x31, 0x30, 0x27, 0xc9, 0x46,
	0xf0, 0x5e, 0x70, 0x65, 0xcf, 0x65, 0x7b, 0x2e, 0x87, 0x93, 0xc9, 0xd1, 0xb, 0x5a, 0x74, 0xdb,
	0x16, 0x1, 0x62, 0x1c, 0x55, 0x58, 0xb9, 0xb1, 0x5e, 0x27, 0xdc, 0xb5, 0x48, 0x51, 0xf7, 0x65,
	0x64, 0xb0, 0x1f, 0x86, 0x98, 0x3a, 0xea, 0xf8, 0x6b, 0xc2, 0x5e, 0x53, 0x36, 0x96, 0xfa, 0xeb,
	0x11, 0x9f, 0x85, 0x23, 0xf6, 0x3, 0x91, 0x52, 0x3, 0x59, 0xb8, 0x36, 0x1e, 0xc8, 0x89, 0xb1,
	0xfc, 0xca, 0xbd, 0x13, 0x44, 0x21, 0x2d, 0x88, 0x4a, 0xb0, 0x9c, 0x71, 0x8b, 0x8f, 0xbf, 0x36,
	0x9d, 0x5, 0x21, 0x88, 0xab, 0xbd, 0x19, 0x1f, 0xd9, 0xa6, 0xd3, 0x3b, 0x10, 0xcb, 0xc5, 0xd4,
	0x98, 0x2c, 0x3e, 0x36, 0x17, 0x4e, 0x40, 0xc4, 0x74, 0x30, 0xb1, 0x4e, 0x2a, 0x50, 0x2c, 0xc5,
	0x47, 0x2a, 0x29, 0x1a, 0x1d, 0xfd, 0x3d, 0x6, 0x31, 0xf9, 0x19, 0x5b, 0x15, 0x95, 0x7a, 0xa3,
	0x51, 0x57, 0x18, 0x14, 0x36, 0x8a, 0xc9, 0xfd, 0x58, 0xa8, 0x9e, 0x3b, 0xf, 0x32, 0x62, 0x51,
	0xba, 0x61, 0x51, 0x3c, 0xc4, 0x2, 0xd6, 0xf8, 0x4b, 0x46, 0x7f, 0xa0, 0x76, 0x2f, 0x7a, 0x97,
	0xbb, 0x3c, 0x92, 0x2a, 0x19, 0x95, 0x87, 0x6b, 0x25, 0xa9, 0x34, 0x85, 0x2b, 0xee, 0x38, 0x5e,
	0xf4, 0xac, 0x9e, 0x3c, 0x13, 0xaf, 0xf8, 0x32, 0xae, 0xa5, 0xef, 0x9f, 0x9e, 0xca, 0x71, 0x95,
	0x94, 0x55, 0x6f, 0x3a, 0xe5, 0x6e, 0x80, 0xae, 0x40, 0xcd, 0xb3, 0x55, 0x61, 0x95, 0xb0, 0x16,
	0xe3, 0x14, 0xe7, 0x4e, 0xd4, 0x16, 0xf5, 0xf1, 0xe9, 0xa9, 0xfc, 0xdf, 0xcf, 0xbf, 0xfd, 0xf3,
	0xe3, 0xaf, 0x7f, 0xff, 0xf1, 0xcb, 0xbf, 0xbf, 0xff, 0x24, 0xb7, 0xe4, 0x96, 0x22, 0xab, 0xb2,
	0x26, 0x6b, 0x8a, 0xac, 0xd5, 0x65, 0x5d, 0x6e, 0xa3, 0x69, 0x8d, 0x9, 0xa7, 0x36, 0xa1, 0x95,
	0x71, 0x4d, 0x65, 0x63, 0xc2, 0xa1, 0x45, 0x9c, 0x9a, 0x94, 0x53, 0xf6, 0x4a, 0xd0, 0xa, 0x7a,
	0xbd, 0x4, 0x15, 0x32, 0xae, 0xd5, 0x6c, 0xfc, 0x2c, 0x2f, 0x7a, 0x82, 0x46, 0x60, 0x46, 0x74,
	0xad, 0x13, 0x5c, 0x4b, 0x8e, 0x1d, 0x96, 0x7, 0xb4, 0xc6, 0xed, 0x75, 0x9a, 0x1f, 0xdd, 0x88,
	0xd2, 0x9e, 0x83, 0x58, 0x53, 0x21, 0x9e, 0x28, 0xf3, 0x4b, 0xd5, 0xf, 0xb6, 0x53, 0xb5, 0x59,
	0xcf, 0x25, 0x35, 0x59, 0xe4, 0x37, 0xd7, 0xe3, 0x25, 0x6b, 0xd6, 0x57, 0xb2, 0xa2, 0x3f, 0x9,
	0x73, 0x93, 0xf5, 0x3e, 0x2c, 0x1a, 0xef, 0x0, 0xb, 0xa1, 0x95, 0x67, 0x84, 0xb3, 0x96, 0x82,
	0x23, 0xf0, 0x74, 0x67, 0x23, 0x52, 0x64, 0x5d, 0x56, 0xf3, 0xd9, 0x7c, 0xf4, 0xdc, 0x3, 0xbc,
	0xa5, 0x10, 0x43, 0x23, 0x97, 0x6f, 0xa7, 0xfb, 0x7, 0x87, 0x9a, 0x67, 0x84, 0xdf, 0x75, 0x8,
	0x38, 0x1e, 0x1b, 0x51, 0x74, 0xa4, 0x67, 0xa5, 0xe5, 0xc9, 0x8a, 0xb6, 0x45, 0x32, 0x4d, 0x21,
	0xec, 0x91, 0x4c, 0xab, 0xdf, 0xb1, 0xe7, 0x6d, 0x6b, 0xf6, 0xe1, 0xb6, 0x66, 0xd1, 0x79, 0x2e,
	0x7d, 0x40, 0x6b, 0xef, 0x46, 0x40, 0x33, 0x8d, 0xba, 0xf3, 0xbc, 0x9d, 0x3c, 0x4, 0x3d, 0xd7,
	0xc4, 0x54, 0x53, 0x26, 0xa6, 0x1a, 0xa5, 0x66, 0x7a, 0x56, 0xed, 0xb7, 0x7b, 0x71, 0x6a, 0x50,
	0xa4, 0xa0, 0xdb, 0x6c, 0x99, 0x10, 0x37, 0x59, 0x71, 0x3a, 0x9f, 0x3c, 0x74, 0x57, 0x52, 0x1a,
	0x79, 0xd6, 0x1b, 0x6a, 0x4b, 0xae, 0x5a, 0xc1, 0xe8, 0xb6, 0x6d, 0xdc, 0xf, 0x23, 0x6a, 0x2a,
	0x19, 0xcd, 0x8e, 0xbe, 0xd1, 0x22, 0x48, 0xdd, 0x1c, 0x6d, 0xeb, 0xb7, 0x3d, 0x9, 0x3b, 0x9e,
	0xd2, 0xba, 0x96, 0x7a, 0xf6, 0xf7, 0xc9, 0xa5, 0x54, 0x1, 0x9b, 0x34, 0xbd, 0xc, 0x38, 0x9,
	0xc6, 0x21, 0x3a, 0x58, 0x27, 0x9d, 0xb5, 0x13, 0x96, 0xba, 0x42, 0xbf, 0xdc, 0xf0, 0x22, 0xa6,
	0xf5, 0x22, 0xbe, 0xdc, 0x74, 0x23, 0x1d, 0x5f, 0xa0, 0x1a, 0x94, 0x70, 0xb1, 0x54, 0xc1, 0x47,
	0xe9, 0x4d, 0x56, 0x8a, 0x3b, 0x8d, 0x42, 0x3a, 0x2f, 0xc2, 0xbc, 0x37, 0x37, 0x62, 0x9b, 0xf3,
	0xc6, 0xf, 0xf7, 0xf0, 0x7e, 0x44, 0x29, 0x69, 0x49, 0xf3, 0xf5, 0xd, 0xdf, 0xb3, 0x74, 0xa3,
	0x1a, 0x6a, 0x3a, 0xf, 0x75, 0xcf, 0x72, 0x7b, 0x7e, 0x54, 0x41, 0x7b, 0x4c, 0xb9, 0x39, 0xb9,
	0x69, 0x4e, 0xa6, 0xea, 0x4a, 0x21, 0xda, 0xb9, 0x71, 0x2f, 0xf3, 0x76, 0x37, 0xf7, 0xf6, 0x6d,
	0x1c, 0xba, 0x9b, 0x6b, 0xf4, 0x7, 0xe7, 0x17, 0x97, 0x54, 0xb8, 0xa2, 0xfd, 0xe9, 0xb3, 0x35,
	0x56, 0x61, 0x2f, 0xd6, 0x1f, 0x76, 0x9a, 0xb6, 0xe9, 0x61, 0x3e, 0x31, 0xfa, 0x83, 0x76, 0xa7,
	0xdb, 0x24, 0x3, 0x2d, 0x5a, 0xde, 0x62, 0xe8, 0xf0, 0x35, 0x56, 0x90, 0x80, 0x7d, 0xf1, 0xed,
	0x9f, 0xdd, 0xbf, 0x3e, 0xb7, 0xbe, 0x39, 0xd4, 0x60, 0x4e, 0x8f, 0xb5, 0x6a, 0xf4, 0x7, 0xad,
	0x6e, 0xb7, 0x43, 0x85, 0x2a, 0xd, 0x3d, 0xcf, 0x59, 0x3, 0x15, 0x8f, 0x75, 0xc2, 0x85, 0x4c,
	0x80, 0xf6, 0x2f, 0x75, 0x3a, 0xd0, 0x65, 0xc0, 0x8f, 0xad, 0xbe, 0x90, 0xa1, 0xa2, 0xb5, 0x10,
	0xe8, 0xf9, 0x45, 0xf3, 0x5, 0x3d, 0xad, 0x86, 0xb6, 0x6b, 0xfa, 0x4b, 0x64, 0x5a, 0x9, 0x4a,
	0x56, 0xeb, 0xdf, 0x39, 0xef, 0x91, 0x43, 0x95, 0xd8, 0x31, 0x4d, 0x2a, 0xc6, 0x9a, 0x9b, 0x74,
	0xf4, 0xee, 0x64, 0x75, 0xe2, 0x15, 0x31, 0x5a, 0x98, 0x9b, 0x5a, 0x60, 0xc, 0x86, 0x54, 0x83,
	0xd1, 0xa6, 0x41, 0x16, 0x85, 0xcc, 0x68, 0x3e, 0x27, 0x17, 0xb2, 0x9c, 0xef, 0xe, 0x76, 0x57,
	0xa9, 0x70, 0x74, 0x95, 0xaa, 0x70, 0x52, 0xc1, 0x2e, 0x13, 0xbb, 0x56, 0x88, 0xb2, 0xb3, 0x57,
	0x64, 0x8b, 0xeb, 0x3a, 0x79, 0xe, 0xb2, 0xc5, 0x75, 0x83, 0x3c, 0x47, 0x3, 0x15, 0x3f, 0xf0,
	0x7f, 0x0, 0x0, 0x0, 0xff, 0xff, 0x33, 0xbe, 0xa2, 0x39, 0xa2, 0x26, 0x0, 0x0,
}

func init() {
	if file_reflection_test_idl_thrift != nil {
		return
	}
	file_reflection_test_idl_thrift = thrift_reflection.BuildFileDescriptor(file_idl_reflection_test_idl_rawDesc, file_reflection_test_idl_thrift_go_types)
}

func GetFileDescriptorForReflectionTestIdl() *thrift_reflection.FileDescriptor {
	return file_reflection_test_idl_thrift
}
func (p *IDCard) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("IDCard")
}
func (p *Person) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("Person")
}
func (p *A0) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A0")
}
func (p *A1) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A1")
}
func (p *A2) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A2")
}
func (p *A3) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A3")
}
func (p *B) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("B")
}
func (p *B1) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("B1")
}
func (p *C) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("C")
}
func (p *D) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("D")
}
func (p *D1) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("D1")
}
func (p *D2) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("D2")
}
func (p *E) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("E")
}
func (p *F) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("F")
}
func (p Gender) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_reflection_test_idl_thrift.GetEnumDescriptor("Gender")
}
func (p Size) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_reflection_test_idl_thrift.GetEnumDescriptor("Size")
}
func GetTypeDescriptorForSpecialString() *thrift_reflection.TypedefDescriptor {
	return file_reflection_test_idl_thrift.GetTypedefDescriptor("SpecialString")
}
func GetTypeDescriptorForSpecialPerson() *thrift_reflection.TypedefDescriptor {
	return file_reflection_test_idl_thrift.GetTypedefDescriptor("SpecialPerson")
}
func GetConstDescriptorForMYCONST() *thrift_reflection.ConstDescriptor {
	return file_reflection_test_idl_thrift.GetConstDescriptor("MY_CONST")
}
func GetConstDescriptorForMYINTCONST() *thrift_reflection.ConstDescriptor {
	return file_reflection_test_idl_thrift.GetConstDescriptor("MY_INT_CONST")
}
func GetConstDescriptorForMYFLOATCONST() *thrift_reflection.ConstDescriptor {
	return file_reflection_test_idl_thrift.GetConstDescriptor("MY_FLOAT_CONST")
}
func GetConstDescriptorForMYBOOLCONST() *thrift_reflection.ConstDescriptor {
	return file_reflection_test_idl_thrift.GetConstDescriptor("MY_BOOL_CONST")
}
func GetConstDescriptorForMYBYTECONST() *thrift_reflection.ConstDescriptor {
	return file_reflection_test_idl_thrift.GetConstDescriptor("MY_BYTE_CONST")
}
func (p *MyUnion) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetUnionDescriptor("MyUnion")
}
func (p *MyException) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetExceptionDescriptor("MyException")
}

func GetServiceDescriptorForMyService() *thrift_reflection.ServiceDescriptor {
	return file_reflection_test_idl_thrift.GetServiceDescriptor("MyService")
}
func GetMethodDescriptorForMyServiceM1() *thrift_reflection.MethodDescriptor {
	return file_reflection_test_idl_thrift.GetMethodDescriptor("MyService", "M1")
}
func GetMethodDescriptorForMyServiceM2() *thrift_reflection.MethodDescriptor {
	return file_reflection_test_idl_thrift.GetMethodDescriptor("MyService", "M2")
}
func GetMethodDescriptorForMyServiceM3() *thrift_reflection.MethodDescriptor {
	return file_reflection_test_idl_thrift.GetMethodDescriptor("MyService", "M3")
}
