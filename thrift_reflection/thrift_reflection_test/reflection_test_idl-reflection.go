// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package thrift_reflection_test

import (
	"reflect"

	"github.com/cloudwego/thriftgo/thrift_reflection"
)

// IDL Name: reflection_test_idl
// IDL Path: reflection_test_idl.thrift

var file_reflection_test_idl_thrift_go_types = []interface{}{
	(*IDCard)(nil),        // Struct 0: thrift_reflection_test.IDCard
	(*Person)(nil),        // Struct 1: thrift_reflection_test.Person
	(*A0)(nil),            // Struct 2: thrift_reflection_test.A0
	(*A1)(nil),            // Struct 3: thrift_reflection_test.A1
	(*A2)(nil),            // Struct 4: thrift_reflection_test.A2
	(*A3)(nil),            // Struct 5: thrift_reflection_test.A3
	(*B)(nil),             // Struct 6: thrift_reflection_test.B
	(*B1)(nil),            // Struct 7: thrift_reflection_test.B1
	(*C)(nil),             // Struct 8: thrift_reflection_test.C
	(*D)(nil),             // Struct 9: thrift_reflection_test.D
	(*D1)(nil),            // Struct 10: thrift_reflection_test.D1
	(*D2)(nil),            // Struct 11: thrift_reflection_test.D2
	(*E)(nil),             // Struct 12: thrift_reflection_test.E
	(*F)(nil),             // Struct 13: thrift_reflection_test.F
	(*MyUnion)(nil),       // Union 0: thrift_reflection_test.MyUnion
	(*MyException)(nil),   // Exception 0: thrift_reflection_test.MyException
	(*Gender)(nil),        // Enum 0: thrift_reflection_test.Gender
	(*Size)(nil),          // Enum 1: thrift_reflection_test.Size
	(*SpecialString)(nil), // Enum 0: thrift_reflection_test.SpecialString
	(*SpecialPerson)(nil), // Enum 1: thrift_reflection_test.SpecialPerson
}
var file_reflection_test_idl_thrift *thrift_reflection.FileDescriptor
var file_idl_reflection_test_idl_rawDesc = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xdc, 0x59, 0xcd, 0x6e, 0xe3, 0xd4,
	0x17, 0x3f, 0xbe, 0x76, 0x3e, 0x66, 0x92, 0x4c, 0xfe, 0x7f, 0xa4, 0x99, 0x5, 0x62, 0x61, 0xb1,
	0x60, 0x49, 0x6b, 0x67, 0x84, 0x90, 0xd8, 0xe0, 0xd8, 0x29, 0xaa, 0x54, 0x37, 0xd5, 0xa4, 0xa0,
	0x29, 0xb, 0x22, 0x37, 0xbe, 0x49, 0xad, 0x3a, 0x76, 0x70, 0x9c, 0xd1, 0x4, 0xde, 0x81, 0x25,
	0xac, 0x58, 0xf2, 0x6, 0xb0, 0xe5, 0x2d, 0x58, 0xb3, 0x41, 0x8, 0xde, 0x2, 0xf9, 0x2b, 0xdf,
	0x4d, 0xee, 0xb9, 0xb5, 0xa7, 0xa3, 0xe9, 0x26, 0x95, 0x7d, 0xcf, 0xb9, 0xbf, 0xdf, 0xf9, 0xba,
	0xc7, 0xe7, 0xd6, 0x40, 0x0, 0x80, 0xf7, 0x3, 0x3a, 0x74, 0xe9, 0x20, 0x74, 0x7c, 0xaf, 0x1f,
	0xd2, 0x69, 0xd8, 0x77, 0x6c, 0xf7, 0xe3, 0xf0, 0x26, 0x70, 0x86, 0x61, 0x3, 0x48, 0xad, 0x6,
	0x10, 0x2f, 0x7b, 0xba, 0x63, 0x59, 0x5f, 0x5, 0x80, 0xf, 0x76, 0xbe, 0x58, 0x68, 0x10, 0x17,
	0x1a, 0xc8, 0xc8, 0x7, 0x80, 0x67, 0xc9, 0x8b, 0xfe, 0x86, 0x54, 0x13, 0xa4, 0x7a, 0xb4, 0xe6,
	0x20, 0xa6, 0x1a, 0x10, 0x0, 0x78, 0x64, 0xce, 0x7b, 0x34, 0x78, 0xe5, 0xc, 0x68, 0x13, 0xc4,
	0x48, 0x50, 0x64, 0x14, 0x24, 0xa6, 0x52, 0x67, 0x5e, 0x5c, 0x9e, 0x86, 0x81, 0xe3, 0x8d, 0x20,
	0x5, 0x27, 0x30, 0x8a, 0x9, 0x13, 0xc4, 0x16, 0x17, 0x34, 0x98, 0xfa, 0x1e, 0xd4, 0x40, 0x2,
	0x80, 0xea, 0xb, 0xfa, 0xed, 0xcc, 0x9, 0xa8, 0x5d, 0x85, 0x52, 0xa4, 0xa8, 0x1, 0x95, 0x5a,
	0x13, 0x0, 0xa0, 0x6, 0xd5, 0xe8, 0x7, 0x1a, 0x50, 0xca, 0x1e, 0x94, 0xa3, 0x9f, 0x26, 0x54,
	0x22, 0x64, 0x40, 0xa2, 0xf7, 0xcc, 0x26, 0x50, 0xb, 0x37, 0x1, 0x99, 0x60, 0xf6, 0x78, 0x8,
	0x1b, 0xb4, 0xd8, 0xf1, 0x11, 0x4d, 0x1, 0x64, 0x7c, 0x12, 0xeb, 0x18, 0xa3, 0xff, 0x98, 0x95,
	0x3b, 0xf3, 0xf6, 0x28, 0x7a, 0xad, 0xdd, 0xdb, 0x13, 0x9c, 0xe9, 0x1b, 0x20, 0x65, 0x2f, 0x4b,
	0xc9, 0x4f, 0x25, 0x5a, 0x62, 0xce, 0x2f, 0xac, 0x80, 0x7a, 0x61, 0x9a, 0xaf, 0xac, 0x14, 0x36,
	0xe5, 0xd2, 0x3c, 0x67, 0x75, 0x80, 0x68, 0x2a, 0xfc, 0x89, 0x9e, 0x4b, 0x88, 0x89, 0xa6, 0xca,
	0x9f, 0x67, 0x3c, 0x96, 0xfe, 0x68, 0x77, 0x21, 0x36, 0xe7, 0x9a, 0xe7, 0x87, 0x37, 0x34, 0xc8,
	0x1c, 0xd0, 0x84, 0x52, 0xa4, 0xea, 0x9, 0x2b, 0xb2, 0x53, 0x43, 0xb7, 0x2, 0x1b, 0x69, 0xff,
	0xb2, 0x37, 0x1b, 0x5f, 0xd3, 0x0, 0x6f, 0x80, 0x7c, 0x13, 0x41, 0xb4, 0x46, 0x14, 0x91, 0x9,
	0xce, 0xa7, 0xec, 0x99, 0xb0, 0xee, 0x2, 0x56, 0x40, 0x69, 0xad, 0x4b, 0xad, 0x59, 0x65, 0x94,
	0x92, 0x3c, 0x6b, 0x8c, 0xe0, 0xc1, 0x66, 0xcb, 0x48, 0x95, 0x18, 0x5a, 0xa3, 0xec, 0x7c, 0xfe,
	0x5f, 0x78, 0xe3, 0x4c, 0x65, 0x67, 0x2a, 0x47, 0x9b, 0xc9, 0xf1, 0xb, 0x5c, 0xd1, 0x71, 0x6c,
	0x4, 0xc4, 0x24, 0xaa, 0x58, 0xcd, 0xcd, 0xaa, 0x75, 0x44, 0x3d, 0x1b, 0x15, 0x75, 0x5f, 0xc4,
	0x2, 0xbb, 0x61, 0x88, 0xdc, 0x51, 0x47, 0x5f, 0x23, 0x5a, 0x80, 0x9a, 0x39, 0xef, 0xbc, 0x1e,
	0xd0, 0x49, 0xb4, 0x62, 0x37, 0x10, 0x89, 0x1b, 0xc8, 0xcc, 0x73, 0xd8, 0x81, 0x54, 0xcc, 0xf9,
	0x97, 0xde, 0x9d, 0x20, 0x4a, 0xbc, 0x20, 0xea, 0xe1, 0x7c, 0x42, 0x6d, 0x3a, 0xfc, 0xca, 0x72,
	0x67, 0x88, 0x20, 0x6e, 0xf4, 0x26, 0x74, 0xe0, 0x58, 0x6e, 0x6f, 0x4f, 0x2c, 0x97, 0xb9, 0x31,
	0xd9, 0x74, 0x68, 0xcd, 0xdc, 0x10, 0x89, 0x69, 0x6f, 0x62, 0x55, 0xea, 0x50, 0xae, 0x26, 0x9d,
	0xae, 0x14, 0xaf, 0x8e, 0xff, 0x1e, 0x83, 0x98, 0xfd, 0x9b, 0x48, 0x95, 0x15, 0xb5, 0xd5, 0x52,
	0x15, 0x2, 0xa5, 0x95, 0x62, 0x72, 0x3f, 0x16, 0xba, 0xef, 0x4d, 0xc3, 0x9c, 0x58, 0x54, 0x17,
	0x2c, 0xca, 0xfb, 0x58, 0xc0, 0x12, 0x7f, 0xd5, 0xbc, 0xea, 0xeb, 0xdd, 0xf3, 0xde, 0xe5, 0x36,
	0x8f, 0xac, 0x4a, 0xc6, 0xe5, 0xe1, 0x56, 0xc9, 0x2a, 0x4d, 0xe9, 0x86, 0xba, 0xae, 0x1f, 0x3f,
	0x53, 0xb3, 0x67, 0xe2, 0xd, 0x9d, 0x27, 0xb5, 0xf4, 0xff, 0x47, 0x47, 0x72, 0x52, 0x25, 0x65,
	0xdd, 0x1f, 0x8f, 0xa9, 0x17, 0x32, 0x57, 0x20, 0xed, 0x38, 0x2d, 0xac, 0x12, 0xab, 0xc4, 0x90,
	0xa3, 0x4b, 0x60, 0x3a, 0xa2, 0x3e, 0x3c, 0x3a, 0x92, 0xff, 0xfd, 0xe9, 0xd7, 0xbf, 0x7f, 0xf8,
	0xe5, 0xaf, 0xdf, 0x7f, 0xfe, 0xe7, 0xb7, 0x1f, 0xe5, 0xb6, 0xdc, 0x56, 0x64, 0x5d, 0x36, 0x64,
	0x43, 0x91, 0xd, 0x55, 0xee, 0xc8, 0x27, 0xcc, 0xb4, 0x86, 0x88, 0x46, 0x42, 0x68, 0xe7, 0x5c,
	0x53, 0xc9, 0x10, 0xd1, 0x4b, 0x8a, 0x63, 0xb, 0xf3, 0xf1, 0x93, 0x1a, 0xb4, 0xce, 0xec, 0x2f,
	0x41, 0x87, 0x9c, 0x6b, 0x35, 0x19, 0x3e, 0x2f, 0x8a, 0x9e, 0x60, 0x20, 0x98, 0x21, 0x55, 0x77,
	0x10, 0xaa, 0x25, 0xd7, 0x89, 0xca, 0x3, 0xb3, 0x8d, 0x4f, 0x96, 0x69, 0x7e, 0xf0, 0x20, 0xe2,
	0xed, 0x83, 0x88, 0xa6, 0x20, 0x3b, 0xca, 0xe2, 0x52, 0xf5, 0xbd, 0xcd, 0x54, 0xd5, 0xd4, 0x42,
	0x52, 0x93, 0xc4, 0x7a, 0xb, 0x6d, 0x2f, 0x89, 0xa6, 0xa6, 0x66, 0x65, 0xfe, 0x52, 0x2f, 0xcc,
	0xac, 0xf7, 0x61, 0xd1, 0x7a, 0x7, 0x58, 0x8, 0xed, 0x22, 0x23, 0x9c, 0xb4, 0x15, 0x36, 0x2,
	0xcf, 0xb6, 0xe, 0x22, 0x45, 0xee, 0xc8, 0x7a, 0x31, 0x87, 0x4f, 0xa7, 0xf0, 0x0, 0x6f, 0x2b,
	0xc8, 0xd0, 0x28, 0xe4, 0xdb, 0xe9, 0xfe, 0xc1, 0xa1, 0x17, 0x19, 0xe1, 0x77, 0x35, 0x1, 0x87,
	0x63, 0x23, 0x8e, 0xe, 0x7e, 0x56, 0x46, 0x91, 0xac, 0x70, 0x47, 0x24, 0x31, 0x14, 0xc4, 0x19,
	0x49, 0xc, 0xf5, 0x8e, 0x33, 0x6f, 0xd3, 0x66, 0x4f, 0x37, 0x6d, 0x16, 0xf7, 0x73, 0xfc, 0x1,
	0x6d, 0xbc, 0x1b, 0x1, 0x4d, 0xc, 0xec, 0xc9, 0xf3, 0x76, 0xf2, 0x10, 0x3a, 0x85, 0x26, 0xa6,
	0xce, 0x99, 0x98, 0x7a, 0x9c, 0x9a, 0xfc, 0xac, 0x4e, 0xde, 0x6e, 0xe7, 0x34, 0xa1, 0x8c, 0x41,
	0xb7, 0x3a, 0x32, 0xc1, 0xe, 0x86, 0xc7, 0xd3, 0xd1, 0x43, 0x4f, 0x25, 0xa5, 0x81, 0x6f, 0xbf,
	0xa1, 0xb1, 0x64, 0x3a, 0x37, 0x66, 0x1e, 0xdb, 0x26, 0xf3, 0x30, 0xa4, 0x4d, 0x25, 0x53, 0x3b,
	0xeb, 0xac, 0x8c, 0x8, 0xb8, 0x87, 0xa3, 0x27, 0x9d, 0x75, 0x4d, 0xc2, 0x96, 0x26, 0x5e, 0xd5,
	0x52, 0xcf, 0xf9, 0x2e, 0xbb, 0x43, 0x28, 0xb1, 0x26, 0x4d, 0x2f, 0x7, 0x4e, 0x82, 0xb9, 0x8f,
	0xe, 0xab, 0x92, 0xb3, 0xa5, 0x12, 0xc2, 0x5d, 0xa1, 0x5f, 0xae, 0x68, 0x11, 0x79, 0xb5, 0x88,
	0x2f, 0x57, 0xd5, 0x48, 0x87, 0x1d, 0xd4, 0x84, 0x2a, 0x5b, 0x2c, 0xd5, 0xd9, 0xa3, 0x74, 0x91,
	0x95, 0xe2, 0xd6, 0xa0, 0x10, 0xcf, 0xb, 0xb1, 0xef, 0xe2, 0xa2, 0x72, 0x75, 0xdf, 0xe4, 0xe1,
	0xe, 0xde, 0x8f, 0x30, 0x25, 0x2d, 0x1b, 0xbe, 0xbe, 0xe1, 0x7b, 0x96, 0x6e, 0x5c, 0x43, 0x2d,
	0xf7, 0xa1, 0xee, 0x59, 0xd6, 0xf7, 0x67, 0x2a, 0x68, 0x8f, 0x31, 0x37, 0x27, 0x8b, 0xe1, 0x24,
	0xd7, 0x54, 0x8a, 0x61, 0x9c, 0x9b, 0xcc, 0x32, 0xd7, 0xa7, 0xb9, 0xeb, 0x57, 0x77, 0xcc, 0xd3,
	0x5c, 0xf3, 0xaa, 0x7f, 0x7a, 0x7e, 0x89, 0x85, 0x2b, 0x3a, 0x9f, 0x3c, 0x5f, 0x62, 0x15, 0x76,
	0x62, 0xfd, 0x7e, 0x6b, 0x68, 0xcb, 0xf, 0xf3, 0x89, 0x79, 0xd5, 0x3f, 0x39, 0xeb, 0x6a, 0x68,
	0xa0, 0x65, 0xdb, 0x9f, 0x5d, 0xbb, 0x74, 0x89, 0x15, 0x24, 0x20, 0x9f, 0x7f, 0xf3, 0x47, 0xf7,
	0xcf, 0xcf, 0xec, 0xaf, 0xf7, 0xd, 0x98, 0xf9, 0xb1, 0x36, 0xcc, 0xab, 0x7e, 0xbb, 0xdb, 0x3d,
	0xc3, 0x42, 0x95, 0xae, 0x7d, 0xdf, 0x5d, 0x2, 0x15, 0xf, 0x4d, 0xc2, 0x85, 0x5c, 0x80, 0x5e,
	0x5d, 0x76, 0xf0, 0x40, 0xe7, 0x21, 0x3d, 0xe4, 0x7d, 0x21, 0x47, 0x8b, 0x36, 0x23, 0xa0, 0xa7,
	0xe7, 0xda, 0xb, 0x7c, 0x5a, 0x5d, 0x3b, 0x9e, 0x15, 0xcc, 0x19, 0xd3, 0x4a, 0x50, 0xf2, 0xf2,
	0xff, 0xd9, 0x69, 0xf, 0x1d, 0xaa, 0xc8, 0x89, 0x69, 0x56, 0x31, 0x96, 0xdc, 0xa4, 0x83, 0x77,
	0x27, 0x69, 0xc7, 0x2b, 0xb2, 0xd8, 0xc2, 0x5a, 0xb5, 0x5, 0x8b, 0xc0, 0x35, 0x56, 0x60, 0xb0,
	0x2a, 0x90, 0x47, 0x21, 0x33, 0xb5, 0xb, 0x74, 0x21, 0x2b, 0xf8, 0xee, 0x60, 0xdb, 0x4b, 0xa5,
	0x83, 0x5e, 0x6a, 0x40, 0xa5, 0xce, 0xea, 0x26, 0x72, 0xab, 0x20, 0xcd, 0x4e, 0x5e, 0xa1, 0x25,
	0x6e, 0x55, 0xf4, 0x1e, 0x68, 0x89, 0xdb, 0x16, 0x7a, 0x8f, 0x16, 0x53, 0xfc, 0xc0, 0x7f, 0x1,
	0x0, 0x0, 0xff, 0xff, 0xe7, 0x6a, 0xbc, 0x39, 0x72, 0x28, 0x0, 0x0,
}

func init() {
	if file_reflection_test_idl_thrift != nil {
		return
	}
	type x struct{}
	builder := &thrift_reflection.FileDescriptorBuilder{
		Bytes:         file_idl_reflection_test_idl_rawDesc,
		GoTypes:       file_reflection_test_idl_thrift_go_types,
		GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
	}
	file_reflection_test_idl_thrift = thrift_reflection.BuildFileDescriptor(builder)
}

func GetFileDescriptorForReflectionTestIdl() *thrift_reflection.FileDescriptor {
	return file_reflection_test_idl_thrift
}
func (p *IDCard) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("IDCard")
}

func (p *IDCard) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "IDCard"
	return ret
}
func (p *Person) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("Person")
}

func (p *Person) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "Person"
	return ret
}
func (p *A0) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A0")
}

func (p *A0) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "A0"
	return ret
}
func (p *A1) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A1")
}

func (p *A1) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "A1"
	return ret
}
func (p *A2) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A2")
}

func (p *A2) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "A2"
	return ret
}
func (p *A3) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("A3")
}

func (p *A3) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "A3"
	return ret
}
func (p *B) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("B")
}

func (p *B) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "B"
	return ret
}
func (p *B1) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("B1")
}

func (p *B1) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "B1"
	return ret
}
func (p *C) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("C")
}

func (p *C) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "C"
	return ret
}
func (p *D) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("D")
}

func (p *D) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "D"
	return ret
}
func (p *D1) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("D1")
}

func (p *D1) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "D1"
	return ret
}
func (p *D2) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("D2")
}

func (p *D2) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "D2"
	return ret
}
func (p *E) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("E")
}

func (p *E) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "E"
	return ret
}
func (p *F) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetStructDescriptor("F")
}

func (p *F) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "F"
	return ret
}
func (p Gender) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_reflection_test_idl_thrift.GetEnumDescriptor("Gender")
}

func (p *Gender) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "Gender"
	return ret
}
func (p Size) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_reflection_test_idl_thrift.GetEnumDescriptor("Size")
}

func (p *Size) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "Size"
	return ret
}
func (p *MyUnion) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetUnionDescriptor("MyUnion")
}

func (p *MyUnion) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "MyUnion"
	return ret
}
func (p *MyException) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_reflection_test_idl_thrift.GetExceptionDescriptor("MyException")
}

func (p *MyException) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_reflection_test_idl_thrift.Filepath
	ret.Name = "MyException"
	return ret
}
