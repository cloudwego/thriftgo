// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package thrift_reflection

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/generator/golang/extension/meta"
)

type TypeDescriptor struct {
	Filepath  string          `thrift:"filepath,1,required" json:"filepath"`
	TypeName  string          `thrift:"type_name,2,required" json:"type_name"`
	KeyType   *TypeDescriptor `thrift:"key_type,3,optional" json:"key_type,omitempty"`
	ValueType *TypeDescriptor `thrift:"value_type,4,optional" json:"value_type,omitempty"`
}

func init() {
	meta.RegisterStruct(NewTypeDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x54,
		0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
		0x69, 0x70, 0x74, 0x6f, 0x72, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0x6, 0x73, 0x74, 0x72, 0x75,
		0x63, 0x74, 0xf, 0x0, 0x3, 0xc, 0x0, 0x0,
		0x0, 0x4, 0x6, 0x0, 0x1, 0x0, 0x1, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x8, 0x66, 0x69,
		0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0x0, 0x6, 0x0, 0x1, 0x0, 0x2, 0xb, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x9, 0x74, 0x79, 0x70,
		0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0x0, 0x6, 0x0, 0x1, 0x0, 0x3, 0xb, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x8, 0x6b, 0x65, 0x79,
		0x5f, 0x74, 0x79, 0x70, 0x65, 0x8, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x2, 0xc, 0x0, 0x4, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x4, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0xa, 0x76, 0x61, 0x6c, 0x75,
		0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0,
		0x0, 0x0,
	})
}

func NewTypeDescriptor() *TypeDescriptor {
	return &TypeDescriptor{}
}

func (p *TypeDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *TypeDescriptor) GetTypeName() (v string) {
	return p.TypeName
}

var TypeDescriptor_KeyType_DEFAULT *TypeDescriptor

func (p *TypeDescriptor) GetKeyType() (v *TypeDescriptor) {
	if !p.IsSetKeyType() {
		return TypeDescriptor_KeyType_DEFAULT
	}
	return p.KeyType
}

var TypeDescriptor_ValueType_DEFAULT *TypeDescriptor

func (p *TypeDescriptor) GetValueType() (v *TypeDescriptor) {
	if !p.IsSetValueType() {
		return TypeDescriptor_ValueType_DEFAULT
	}
	return p.ValueType
}

var fieldIDToName_TypeDescriptor = map[int16]string{
	1: "filepath",
	2: "type_name",
	3: "key_type",
	4: "value_type",
}

func (p *TypeDescriptor) IsSetKeyType() bool {
	return p.KeyType != nil
}

func (p *TypeDescriptor) IsSetValueType() bool {
	return p.ValueType != nil
}

func (p *TypeDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetTypeName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTypeName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTypeName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TypeDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TypeDescriptor[fieldId]))
}

func (p *TypeDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *TypeDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.TypeName = v
	}
	return nil
}

func (p *TypeDescriptor) ReadField3(iprot thrift.TProtocol) error {
	p.KeyType = NewTypeDescriptor()
	if err := p.KeyType.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TypeDescriptor) ReadField4(iprot thrift.TProtocol) error {
	p.ValueType = NewTypeDescriptor()
	if err := p.ValueType.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TypeDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TypeDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TypeDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TypeDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TypeName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TypeDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyType() {
		if err = oprot.WriteFieldBegin("key_type", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KeyType.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TypeDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetValueType() {
		if err = oprot.WriteFieldBegin("value_type", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ValueType.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TypeDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TypeDescriptor(%+v)", *p)
}

type TypedefDescriptor struct {
	Filepath    string              `thrift:"filepath,1,required" json:"filepath"`
	Type        *TypeDescriptor     `thrift:"type,2,required" json:"type"`
	Alias       string              `thrift:"alias,3,required" json:"alias"`
	Annotations map[string][]string `thrift:"annotations,6,required" json:"annotations"`
	Comments    string              `thrift:"comments,7,required" json:"comments"`
	Extra       map[string]string   `thrift:"extra,8,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewTypedefDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0x11, 0x54,
		0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x44, 0x65,
		0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x6, 0x73,
		0x74, 0x72, 0x75, 0x63, 0x74, 0xf, 0x0, 0x3,
		0xc, 0x0, 0x0, 0x0, 0x6, 0x6, 0x0, 0x1,
		0x0, 0x1, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x8, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74,
		0x68, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1,
		0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0,
		0x2, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x4,
		0x74, 0x79, 0x70, 0x65, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x3, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x5, 0x61, 0x6c, 0x69, 0x61, 0x73,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x6,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0xb, 0x61,
		0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
		0x6e, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xd, 0xc, 0x0, 0x2, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0xc, 0x0,
		0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x7, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x8, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
		0x74, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x8, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x5, 0x65, 0x78, 0x74, 0x72, 0x61, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd, 0xc,
		0x0, 0x2, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0,
	})
}

func NewTypedefDescriptor() *TypedefDescriptor {
	return &TypedefDescriptor{}
}

func (p *TypedefDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

var TypedefDescriptor_Type_DEFAULT *TypeDescriptor

func (p *TypedefDescriptor) GetType() (v *TypeDescriptor) {
	if !p.IsSetType() {
		return TypedefDescriptor_Type_DEFAULT
	}
	return p.Type
}

func (p *TypedefDescriptor) GetAlias() (v string) {
	return p.Alias
}

func (p *TypedefDescriptor) GetAnnotations() (v map[string][]string) {
	return p.Annotations
}

func (p *TypedefDescriptor) GetComments() (v string) {
	return p.Comments
}

var TypedefDescriptor_Extra_DEFAULT map[string]string

func (p *TypedefDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return TypedefDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_TypedefDescriptor = map[int16]string{
	1: "filepath",
	2: "type",
	3: "alias",
	6: "annotations",
	7: "comments",
	8: "extra",
}

func (p *TypedefDescriptor) IsSetType() bool {
	return p.Type != nil
}

func (p *TypedefDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *TypedefDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetType bool = false
	var issetAlias bool = false
	var issetAnnotations bool = false
	var issetComments bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetAlias = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetAlias {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAnnotations {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TypedefDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TypedefDescriptor[fieldId]))
}

func (p *TypedefDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *TypedefDescriptor) ReadField2(iprot thrift.TProtocol) error {
	p.Type = NewTypeDescriptor()
	if err := p.Type.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TypedefDescriptor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Alias = v
	}
	return nil
}

func (p *TypedefDescriptor) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotations = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TypedefDescriptor) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *TypedefDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *TypedefDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TypedefDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TypedefDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TypedefDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Type.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TypedefDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("alias", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Alias); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TypedefDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotations)); err != nil {
		return err
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *TypedefDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TypedefDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *TypedefDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TypedefDescriptor(%+v)", *p)
}

type EnumDescriptor struct {
	Filepath    string                 `thrift:"filepath,1,required" json:"filepath"`
	Name        string                 `thrift:"name,2,required" json:"name"`
	Values      []*EnumValueDescriptor `thrift:"values,3,required" json:"values"`
	Annotations map[string][]string    `thrift:"annotations,6,required" json:"annotations"`
	Comments    string                 `thrift:"comments,7,required" json:"comments"`
	Extra       map[string]string      `thrift:"extra,8,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewEnumDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x45,
		0x6e, 0x75, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72,
		0x69, 0x70, 0x74, 0x6f, 0x72, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0x6, 0x73, 0x74, 0x72, 0x75,
		0x63, 0x74, 0xf, 0x0, 0x3, 0xc, 0x0, 0x0,
		0x0, 0x6, 0x6, 0x0, 0x1, 0x0, 0x1, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x8, 0x66, 0x69,
		0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0x0, 0x6, 0x0, 0x1, 0x0, 0x2, 0xb, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x4, 0x6e, 0x61, 0x6d,
		0x65, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1,
		0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0,
		0x3, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x6,
		0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf, 0xc,
		0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xc, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0,
		0x6, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0xb,
		0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
		0x6f, 0x6e, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xd, 0xc, 0x0, 0x2, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0xc,
		0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xf, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x7, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x8, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
		0x6e, 0x74, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x8, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x5, 0x65, 0x78, 0x74, 0x72, 0x61, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd,
		0xc, 0x0, 0x2, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0xc, 0x0, 0x3, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0,
		0x0,
	})
}

func NewEnumDescriptor() *EnumDescriptor {
	return &EnumDescriptor{}
}

func (p *EnumDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *EnumDescriptor) GetName() (v string) {
	return p.Name
}

func (p *EnumDescriptor) GetValues() (v []*EnumValueDescriptor) {
	return p.Values
}

func (p *EnumDescriptor) GetAnnotations() (v map[string][]string) {
	return p.Annotations
}

func (p *EnumDescriptor) GetComments() (v string) {
	return p.Comments
}

var EnumDescriptor_Extra_DEFAULT map[string]string

func (p *EnumDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return EnumDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_EnumDescriptor = map[int16]string{
	1: "filepath",
	2: "name",
	3: "values",
	6: "annotations",
	7: "comments",
	8: "extra",
}

func (p *EnumDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *EnumDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetName bool = false
	var issetValues bool = false
	var issetAnnotations bool = false
	var issetComments bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValues = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValues {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAnnotations {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EnumDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EnumDescriptor[fieldId]))
}

func (p *EnumDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *EnumDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *EnumDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Values = make([]*EnumValueDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewEnumValueDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Values = append(p.Values, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *EnumDescriptor) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotations = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *EnumDescriptor) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *EnumDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *EnumDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EnumDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EnumDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EnumDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EnumDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("values", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
		return err
	}
	for _, v := range p.Values {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EnumDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotations)); err != nil {
		return err
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EnumDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EnumDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EnumDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnumDescriptor(%+v)", *p)
}

type EnumValueDescriptor struct {
	Filepath    string              `thrift:"filepath,1,required" json:"filepath"`
	Name        string              `thrift:"name,2,required" json:"name"`
	Value       int64               `thrift:"value,3,required" json:"value"`
	Annotations map[string][]string `thrift:"annotations,6,required" json:"annotations"`
	Comments    string              `thrift:"comments,7,required" json:"comments"`
	Extra       map[string]string   `thrift:"extra,8,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewEnumValueDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0x13, 0x45,
		0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
		0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
		0x6f, 0x72, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x6, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0xf,
		0x0, 0x3, 0xc, 0x0, 0x0, 0x0, 0x6, 0x6,
		0x0, 0x1, 0x0, 0x1, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x8, 0x66, 0x69, 0x6c, 0x65, 0x70,
		0x61, 0x74, 0x68, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x2, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x4, 0x6e, 0x61, 0x6d, 0x65, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0x0, 0x6, 0x0, 0x1, 0x0, 0x3, 0xb, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x5, 0x76, 0x61, 0x6c,
		0x75, 0x65, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xa, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x6, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0xb, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
		0x69, 0x6f, 0x6e, 0x73, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xd, 0xc, 0x0, 0x2,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xf, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x7, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0x8, 0x63, 0x6f, 0x6d, 0x6d,
		0x65, 0x6e, 0x74, 0x73, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x8, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x5, 0x65, 0x78, 0x74, 0x72, 0x61,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x2, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xd, 0xc, 0x0, 0x2, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0xc, 0x0, 0x3, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0,
		0x0, 0x0,
	})
}

func NewEnumValueDescriptor() *EnumValueDescriptor {
	return &EnumValueDescriptor{}
}

func (p *EnumValueDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *EnumValueDescriptor) GetName() (v string) {
	return p.Name
}

func (p *EnumValueDescriptor) GetValue() (v int64) {
	return p.Value
}

func (p *EnumValueDescriptor) GetAnnotations() (v map[string][]string) {
	return p.Annotations
}

func (p *EnumValueDescriptor) GetComments() (v string) {
	return p.Comments
}

var EnumValueDescriptor_Extra_DEFAULT map[string]string

func (p *EnumValueDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return EnumValueDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_EnumValueDescriptor = map[int16]string{
	1: "filepath",
	2: "name",
	3: "value",
	6: "annotations",
	7: "comments",
	8: "extra",
}

func (p *EnumValueDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *EnumValueDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetName bool = false
	var issetValue bool = false
	var issetAnnotations bool = false
	var issetComments bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValue {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAnnotations {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EnumValueDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EnumValueDescriptor[fieldId]))
}

func (p *EnumValueDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *EnumValueDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *EnumValueDescriptor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Value = v
	}
	return nil
}

func (p *EnumValueDescriptor) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotations = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *EnumValueDescriptor) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *EnumValueDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *EnumValueDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EnumValueDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EnumValueDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EnumValueDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EnumValueDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EnumValueDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotations)); err != nil {
		return err
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EnumValueDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EnumValueDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *EnumValueDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EnumValueDescriptor(%+v)", *p)
}

type FieldDescriptor struct {
	Filepath     string              `thrift:"filepath,1,required" json:"filepath"`
	Name         string              `thrift:"name,2,required" json:"name"`
	Type         *TypeDescriptor     `thrift:"type,3,required" json:"type"`
	Requiredness string              `thrift:"requiredness,24,required" json:"requiredness"`
	ID           int32               `thrift:"id,5,required" json:"id"`
	Annotations  map[string][]string `thrift:"annotations,6,required" json:"annotations"`
	Comments     string              `thrift:"comments,7,required" json:"comments"`
	Extra        map[string]string   `thrift:"extra,8,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewFieldDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63,
		0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0xb, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x6, 0x73, 0x74, 0x72,
		0x75, 0x63, 0x74, 0xf, 0x0, 0x3, 0xc, 0x0,
		0x0, 0x0, 0x8, 0x6, 0x0, 0x1, 0x0, 0x1,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x8, 0x66,
		0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb,
		0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x2, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x4, 0x6e, 0x61,
		0x6d, 0x65, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x3, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x4, 0x74, 0x79, 0x70, 0x65, 0x8, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x18, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0xc, 0x72, 0x65, 0x71, 0x75,
		0x69, 0x72, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x73,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x5,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x69,
		0x64, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1,
		0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0x8, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0,
		0x6, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0xb,
		0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
		0x6f, 0x6e, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xd, 0xc, 0x0, 0x2, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0xc,
		0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xf, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x7, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x8, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
		0x6e, 0x74, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x8, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x5, 0x65, 0x78, 0x74, 0x72, 0x61, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd,
		0xc, 0x0, 0x2, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0xc, 0x0, 0x3, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0,
		0x0,
	})
}

func NewFieldDescriptor() *FieldDescriptor {
	return &FieldDescriptor{}
}

func (p *FieldDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *FieldDescriptor) GetName() (v string) {
	return p.Name
}

var FieldDescriptor_Type_DEFAULT *TypeDescriptor

func (p *FieldDescriptor) GetType() (v *TypeDescriptor) {
	if !p.IsSetType() {
		return FieldDescriptor_Type_DEFAULT
	}
	return p.Type
}

func (p *FieldDescriptor) GetRequiredness() (v string) {
	return p.Requiredness
}

func (p *FieldDescriptor) GetID() (v int32) {
	return p.ID
}

func (p *FieldDescriptor) GetAnnotations() (v map[string][]string) {
	return p.Annotations
}

func (p *FieldDescriptor) GetComments() (v string) {
	return p.Comments
}

var FieldDescriptor_Extra_DEFAULT map[string]string

func (p *FieldDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return FieldDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_FieldDescriptor = map[int16]string{
	1:  "filepath",
	2:  "name",
	3:  "type",
	24: "requiredness",
	5:  "id",
	6:  "annotations",
	7:  "comments",
	8:  "extra",
}

func (p *FieldDescriptor) IsSetType() bool {
	return p.Type != nil
}

func (p *FieldDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *FieldDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetName bool = false
	var issetType bool = false
	var issetRequiredness bool = false
	var issetID bool = false
	var issetAnnotations bool = false
	var issetComments bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 24:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
				issetRequiredness = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRequiredness {
		fieldId = 24
		goto RequiredFieldNotSetError
	}

	if !issetID {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAnnotations {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FieldDescriptor[fieldId]))
}

func (p *FieldDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *FieldDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *FieldDescriptor) ReadField3(iprot thrift.TProtocol) error {
	p.Type = NewTypeDescriptor()
	if err := p.Type.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *FieldDescriptor) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Requiredness = v
	}
	return nil
}

func (p *FieldDescriptor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ID = v
	}
	return nil
}

func (p *FieldDescriptor) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotations = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FieldDescriptor) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *FieldDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FieldDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FieldDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FieldDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Type.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldDescriptor) writeField24(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("requiredness", thrift.STRING, 24); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Requiredness); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}

func (p *FieldDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FieldDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotations)); err != nil {
		return err
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *FieldDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *FieldDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *FieldDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldDescriptor(%+v)", *p)
}

type StructDescriptor struct {
	Filepath   string              `thrift:"filepath,1,required" json:"filepath"`
	Name       string              `thrift:"name,2,required" json:"name"`
	Fields     []*FieldDescriptor  `thrift:"fields,3,required" json:"fields"`
	Annotation map[string][]string `thrift:"annotation,8,required" json:"annotation"`
	Comments   string              `thrift:"comments,9,required" json:"comments"`
	Extra      map[string]string   `thrift:"extra,10,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewStructDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0x10, 0x53,
		0x74, 0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73,
		0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x6, 0x73, 0x74,
		0x72, 0x75, 0x63, 0x74, 0xf, 0x0, 0x3, 0xc,
		0x0, 0x0, 0x0, 0x6, 0x6, 0x0, 0x1, 0x0,
		0x1, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x8,
		0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x2,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x4, 0x6e,
		0x61, 0x6d, 0x65, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x3, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x6, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xf, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x8, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0xa, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
		0x74, 0x69, 0x6f, 0x6e, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xd, 0xc, 0x0, 0x2,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xf, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x9, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0x8, 0x63, 0x6f, 0x6d, 0x6d,
		0x65, 0x6e, 0x74, 0x73, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0xa, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x5, 0x65, 0x78, 0x74, 0x72, 0x61,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x2, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xd, 0xc, 0x0, 0x2, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0xc, 0x0, 0x3, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0,
		0x0, 0x0,
	})
}

func NewStructDescriptor() *StructDescriptor {
	return &StructDescriptor{}
}

func (p *StructDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *StructDescriptor) GetName() (v string) {
	return p.Name
}

func (p *StructDescriptor) GetFields() (v []*FieldDescriptor) {
	return p.Fields
}

func (p *StructDescriptor) GetAnnotation() (v map[string][]string) {
	return p.Annotation
}

func (p *StructDescriptor) GetComments() (v string) {
	return p.Comments
}

var StructDescriptor_Extra_DEFAULT map[string]string

func (p *StructDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return StructDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_StructDescriptor = map[int16]string{
	1:  "filepath",
	2:  "name",
	3:  "fields",
	8:  "annotation",
	9:  "comments",
	10: "extra",
}

func (p *StructDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *StructDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetName bool = false
	var issetFields bool = false
	var issetAnnotation bool = false
	var issetComments bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFields = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotation = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFields {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAnnotation {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StructDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_StructDescriptor[fieldId]))
}

func (p *StructDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *StructDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *StructDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Fields = make([]*FieldDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewFieldDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Fields = append(p.Fields, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *StructDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotation = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotation[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *StructDescriptor) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *StructDescriptor) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *StructDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("StructDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StructDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StructDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *StructDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("fields", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
		return err
	}
	for _, v := range p.Fields {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *StructDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotation", thrift.MAP, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotation)); err != nil {
		return err
	}
	for k, v := range p.Annotation {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *StructDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *StructDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *StructDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StructDescriptor(%+v)", *p)
}

type MethodDescriptor struct {
	Filepath        string              `thrift:"filepath,1,required" json:"filepath"`
	Name            string              `thrift:"name,2,required" json:"name"`
	Response        *TypeDescriptor     `thrift:"response,3,required" json:"response"`
	Args            []*FieldDescriptor  `thrift:"args,4,required" json:"args"`
	Annotations     map[string][]string `thrift:"annotations,5,required" json:"annotations"`
	Comments        string              `thrift:"comments,6,required" json:"comments"`
	Extra           map[string]string   `thrift:"extra,7,optional" json:"extra,omitempty"`
	ThrowExceptions []*FieldDescriptor  `thrift:"throw_exceptions,8,required" json:"throw_exceptions"`
}

func init() {
	meta.RegisterStruct(NewMethodDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0x10, 0x4d,
		0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73,
		0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x6, 0x73, 0x74,
		0x72, 0x75, 0x63, 0x74, 0xf, 0x0, 0x3, 0xc,
		0x0, 0x0, 0x0, 0x8, 0x6, 0x0, 0x1, 0x0,
		0x1, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x8,
		0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
		0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc,
		0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x2,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x4, 0x6e,
		0x61, 0x6d, 0x65, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x3, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x8, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
		0x73, 0x65, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xc, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x4, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x4, 0x61, 0x72, 0x67, 0x73, 0x8, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xf, 0xc, 0x0,
		0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xc,
		0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x5,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0xb, 0x61,
		0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
		0x6e, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xd, 0xc, 0x0, 0x2, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0xc, 0x0,
		0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x6, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0x8, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
		0x74, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x7, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x5, 0x65, 0x78, 0x74, 0x72, 0x61, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd, 0xc,
		0x0, 0x2, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x8, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x77,
		0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
		0x6f, 0x6e, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xf, 0xc, 0x0, 0x3, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0,
		0x0, 0x0,
	})
}

func NewMethodDescriptor() *MethodDescriptor {
	return &MethodDescriptor{}
}

func (p *MethodDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *MethodDescriptor) GetName() (v string) {
	return p.Name
}

var MethodDescriptor_Response_DEFAULT *TypeDescriptor

func (p *MethodDescriptor) GetResponse() (v *TypeDescriptor) {
	if !p.IsSetResponse() {
		return MethodDescriptor_Response_DEFAULT
	}
	return p.Response
}

func (p *MethodDescriptor) GetArgs() (v []*FieldDescriptor) {
	return p.Args
}

func (p *MethodDescriptor) GetAnnotations() (v map[string][]string) {
	return p.Annotations
}

func (p *MethodDescriptor) GetComments() (v string) {
	return p.Comments
}

var MethodDescriptor_Extra_DEFAULT map[string]string

func (p *MethodDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return MethodDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

func (p *MethodDescriptor) GetThrowExceptions() (v []*FieldDescriptor) {
	return p.ThrowExceptions
}

var fieldIDToName_MethodDescriptor = map[int16]string{
	1: "filepath",
	2: "name",
	3: "response",
	4: "args",
	5: "annotations",
	6: "comments",
	7: "extra",
	8: "throw_exceptions",
}

func (p *MethodDescriptor) IsSetResponse() bool {
	return p.Response != nil
}

func (p *MethodDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *MethodDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetName bool = false
	var issetResponse bool = false
	var issetArgs bool = false
	var issetAnnotations bool = false
	var issetComments bool = false
	var issetThrowExceptions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetResponse = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetArgs = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetThrowExceptions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetResponse {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetArgs {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetAnnotations {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetThrowExceptions {
		fieldId = 8
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MethodDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MethodDescriptor[fieldId]))
}

func (p *MethodDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *MethodDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *MethodDescriptor) ReadField3(iprot thrift.TProtocol) error {
	p.Response = NewTypeDescriptor()
	if err := p.Response.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MethodDescriptor) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Args = make([]*FieldDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewFieldDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Args = append(p.Args, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MethodDescriptor) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotations = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MethodDescriptor) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *MethodDescriptor) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MethodDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ThrowExceptions = make([]*FieldDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewFieldDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ThrowExceptions = append(p.ThrowExceptions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MethodDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MethodDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MethodDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MethodDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MethodDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("response", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Response.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MethodDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("args", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Args)); err != nil {
		return err
	}
	for _, v := range p.Args {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MethodDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.MAP, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotations)); err != nil {
		return err
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MethodDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MethodDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MethodDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("throw_exceptions", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ThrowExceptions)); err != nil {
		return err
	}
	for _, v := range p.ThrowExceptions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MethodDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MethodDescriptor(%+v)", *p)
}

type ServiceDescriptor struct {
	Filepath    string              `thrift:"filepath,1,required" json:"filepath"`
	Name        string              `thrift:"name,2,required" json:"name"`
	Methods     []*MethodDescriptor `thrift:"methods,3,required" json:"methods"`
	Annotations map[string][]string `thrift:"annotations,4,required" json:"annotations"`
	Comments    string              `thrift:"comments,5,required" json:"comments"`
	Extra       map[string]string   `thrift:"extra,6,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewServiceDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0x11, 0x53,
		0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
		0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x6, 0x73,
		0x74, 0x72, 0x75, 0x63, 0x74, 0xf, 0x0, 0x3,
		0xc, 0x0, 0x0, 0x0, 0x6, 0x6, 0x0, 0x1,
		0x0, 0x1, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x8, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74,
		0x68, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1,
		0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0,
		0x2, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x4,
		0x6e, 0x61, 0x6d, 0x65, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x3, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x7, 0x6d, 0x65, 0x74, 0x68, 0x6f,
		0x64, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xf, 0xc, 0x0, 0x3, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x4, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0xb, 0x61, 0x6e, 0x6e, 0x6f,
		0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd,
		0xc, 0x0, 0x2, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0xc, 0x0, 0x3, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xf, 0xc, 0x0, 0x3,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x5,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x8, 0x63,
		0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb,
		0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x6, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x5, 0x65, 0x78,
		0x74, 0x72, 0x61, 0x8, 0x0, 0x3, 0x0, 0x0,
		0x0, 0x2, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xd, 0xc, 0x0, 0x2, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0, 0xc,
		0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0x0, 0x0, 0x0,
	})
}

func NewServiceDescriptor() *ServiceDescriptor {
	return &ServiceDescriptor{}
}

func (p *ServiceDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *ServiceDescriptor) GetName() (v string) {
	return p.Name
}

func (p *ServiceDescriptor) GetMethods() (v []*MethodDescriptor) {
	return p.Methods
}

func (p *ServiceDescriptor) GetAnnotations() (v map[string][]string) {
	return p.Annotations
}

func (p *ServiceDescriptor) GetComments() (v string) {
	return p.Comments
}

var ServiceDescriptor_Extra_DEFAULT map[string]string

func (p *ServiceDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return ServiceDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_ServiceDescriptor = map[int16]string{
	1: "filepath",
	2: "name",
	3: "methods",
	4: "annotations",
	5: "comments",
	6: "extra",
}

func (p *ServiceDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *ServiceDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetName bool = false
	var issetMethods bool = false
	var issetAnnotations bool = false
	var issetComments bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetMethods = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetComments = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetMethods {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetAnnotations {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetComments {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServiceDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ServiceDescriptor[fieldId]))
}

func (p *ServiceDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *ServiceDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *ServiceDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Methods = make([]*MethodDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMethodDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Methods = append(p.Methods, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescriptor) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Annotations = make(map[string][]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		p.Annotations[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescriptor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Comments = v
	}
	return nil
}

func (p *ServiceDescriptor) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ServiceDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServiceDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServiceDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ServiceDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("methods", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Methods)); err != nil {
		return err
	}
	for _, v := range p.Methods {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ServiceDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.MAP, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Annotations)); err != nil {
		return err
	}
	for k, v := range p.Annotations {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ServiceDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comments", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Comments); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ServiceDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ServiceDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceDescriptor(%+v)", *p)
}

type FileDescriptor struct {
	Filepath   string               `thrift:"filepath,1,required" json:"filepath"`
	Includes   map[string]string    `thrift:"includes,2,required" json:"includes"`
	Namespaces map[string]string    `thrift:"namespaces,3,required" json:"namespaces"`
	Services   []*ServiceDescriptor `thrift:"services,4,required" json:"services"`
	Structs    []*StructDescriptor  `thrift:"structs,5,required" json:"structs"`
	Exceptions []*StructDescriptor  `thrift:"exceptions,6,required" json:"exceptions"`
	Enums      []*EnumDescriptor    `thrift:"enums,7,required" json:"enums"`
	Typedefs   []*TypedefDescriptor `thrift:"typedefs,8,required" json:"typedefs"`
	Unions     []*StructDescriptor  `thrift:"unions,9,required" json:"unions"`
	Extra      map[string]string    `thrift:"extra,10,optional" json:"extra,omitempty"`
}

func init() {
	meta.RegisterStruct(NewFileDescriptor, []byte{
		0xb, 0x0, 0x1, 0x0, 0x0, 0x0, 0xe, 0x46,
		0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
		0x69, 0x70, 0x74, 0x6f, 0x72, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0x6, 0x73, 0x74, 0x72, 0x75,
		0x63, 0x74, 0xf, 0x0, 0x3, 0xc, 0x0, 0x0,
		0x0, 0xa, 0x6, 0x0, 0x1, 0x0, 0x1, 0xb,
		0x0, 0x2, 0x0, 0x0, 0x0, 0x8, 0x66, 0x69,
		0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0x0, 0x6, 0x0, 0x1, 0x0, 0x2, 0xb, 0x0,
		0x2, 0x0, 0x0, 0x0, 0x8, 0x69, 0x6e, 0x63,
		0x6c, 0x75, 0x64, 0x65, 0x73, 0x8, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xd, 0xc, 0x0,
		0x2, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb,
		0x0, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x6, 0x0,
		0x1, 0x0, 0x3, 0xb, 0x0, 0x2, 0x0, 0x0,
		0x0, 0xa, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
		0x61, 0x63, 0x65, 0x73, 0x8, 0x0, 0x3, 0x0,
		0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xd, 0xc, 0x0, 0x2,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xb, 0x0,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xb, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x4, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x8, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
		0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0, 0x1,
		0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xf, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x6,
		0x0, 0x1, 0x0, 0x5, 0xb, 0x0, 0x2, 0x0,
		0x0, 0x0, 0x7, 0x73, 0x74, 0x72, 0x75, 0x63,
		0x74, 0x73, 0x8, 0x0, 0x3, 0x0, 0x0, 0x0,
		0x1, 0xc, 0x0, 0x4, 0x8, 0x0, 0x1, 0x0,
		0x0, 0x0, 0xf, 0xc, 0x0, 0x3, 0x8, 0x0,
		0x1, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0,
		0x6, 0x0, 0x1, 0x0, 0x6, 0xb, 0x0, 0x2,
		0x0, 0x0, 0x0, 0xa, 0x65, 0x78, 0x63, 0x65,
		0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf, 0xc,
		0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xc, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0,
		0x7, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x5,
		0x65, 0x6e, 0x75, 0x6d, 0x73, 0x8, 0x0, 0x3,
		0x0, 0x0, 0x0, 0x1, 0xc, 0x0, 0x4, 0x8,
		0x0, 0x1, 0x0, 0x0, 0x0, 0xf, 0xc, 0x0,
		0x3, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xc,
		0x0, 0x0, 0x0, 0x6, 0x0, 0x1, 0x0, 0x8,
		0xb, 0x0, 0x2, 0x0, 0x0, 0x0, 0x8, 0x74,
		0x79, 0x70, 0x65, 0x64, 0x65, 0x66, 0x73, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xc, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0x9, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x6, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x8,
		0x0, 0x3, 0x0, 0x0, 0x0, 0x1, 0xc, 0x0,
		0x4, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xf,
		0xc, 0x0, 0x3, 0x8, 0x0, 0x1, 0x0, 0x0,
		0x0, 0xc, 0x0, 0x0, 0x0, 0x6, 0x0, 0x1,
		0x0, 0xa, 0xb, 0x0, 0x2, 0x0, 0x0, 0x0,
		0x5, 0x65, 0x78, 0x74, 0x72, 0x61, 0x8, 0x0,
		0x3, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0, 0x4,
		0x8, 0x0, 0x1, 0x0, 0x0, 0x0, 0xd, 0xc,
		0x0, 0x2, 0x8, 0x0, 0x1, 0x0, 0x0, 0x0,
		0xb, 0x0, 0xc, 0x0, 0x3, 0x8, 0x0, 0x1,
		0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0,
	})
}

func NewFileDescriptor() *FileDescriptor {
	return &FileDescriptor{}
}

func (p *FileDescriptor) GetFilepath() (v string) {
	return p.Filepath
}

func (p *FileDescriptor) GetIncludes() (v map[string]string) {
	return p.Includes
}

func (p *FileDescriptor) GetNamespaces() (v map[string]string) {
	return p.Namespaces
}

func (p *FileDescriptor) GetServices() (v []*ServiceDescriptor) {
	return p.Services
}

func (p *FileDescriptor) GetStructs() (v []*StructDescriptor) {
	return p.Structs
}

func (p *FileDescriptor) GetExceptions() (v []*StructDescriptor) {
	return p.Exceptions
}

func (p *FileDescriptor) GetEnums() (v []*EnumDescriptor) {
	return p.Enums
}

func (p *FileDescriptor) GetTypedefs() (v []*TypedefDescriptor) {
	return p.Typedefs
}

func (p *FileDescriptor) GetUnions() (v []*StructDescriptor) {
	return p.Unions
}

var FileDescriptor_Extra_DEFAULT map[string]string

func (p *FileDescriptor) GetExtra() (v map[string]string) {
	if !p.IsSetExtra() {
		return FileDescriptor_Extra_DEFAULT
	}
	return p.Extra
}

var fieldIDToName_FileDescriptor = map[int16]string{
	1:  "filepath",
	2:  "includes",
	3:  "namespaces",
	4:  "services",
	5:  "structs",
	6:  "exceptions",
	7:  "enums",
	8:  "typedefs",
	9:  "unions",
	10: "extra",
}

func (p *FileDescriptor) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *FileDescriptor) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFilepath bool = false
	var issetIncludes bool = false
	var issetNamespaces bool = false
	var issetServices bool = false
	var issetStructs bool = false
	var issetExceptions bool = false
	var issetEnums bool = false
	var issetTypedefs bool = false
	var issetUnions bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilepath = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetIncludes = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNamespaces = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetServices = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStructs = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetExceptions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnums = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetTypedefs = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetUnions = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFilepath {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetIncludes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetNamespaces {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetServices {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStructs {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetExceptions {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetEnums {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetTypedefs {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetUnions {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileDescriptor[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FileDescriptor[fieldId]))
}

func (p *FileDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filepath = v
	}
	return nil
}

func (p *FileDescriptor) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Includes = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Includes[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Namespaces = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Namespaces[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Services = make([]*ServiceDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewServiceDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Services = append(p.Services, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Structs = make([]*StructDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewStructDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Structs = append(p.Structs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Exceptions = make([]*StructDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewStructDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Exceptions = append(p.Exceptions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Enums = make([]*EnumDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewEnumDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Enums = append(p.Enums, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Typedefs = make([]*TypedefDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewTypedefDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Typedefs = append(p.Typedefs, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Unions = make([]*StructDescriptor, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewStructDescriptor()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Unions = append(p.Unions, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Extra = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Extra[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FileDescriptor) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FileDescriptor"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filepath", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filepath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FileDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("includes", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Includes)); err != nil {
		return err
	}
	for k, v := range p.Includes {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FileDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("namespaces", thrift.MAP, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Namespaces)); err != nil {
		return err
	}
	for k, v := range p.Namespaces {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FileDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("services", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Services)); err != nil {
		return err
	}
	for _, v := range p.Services {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FileDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("structs", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Structs)); err != nil {
		return err
	}
	for _, v := range p.Structs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FileDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("exceptions", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Exceptions)); err != nil {
		return err
	}
	for _, v := range p.Exceptions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *FileDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enums", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Enums)); err != nil {
		return err
	}
	for _, v := range p.Enums {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *FileDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("typedefs", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Typedefs)); err != nil {
		return err
	}
	for _, v := range p.Typedefs {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *FileDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("unions", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Unions)); err != nil {
		return err
	}
	for _, v := range p.Unions {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *FileDescriptor) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return err
		}
		for k, v := range p.Extra {

			if err := oprot.WriteString(k); err != nil {
				return err
			}

			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *FileDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileDescriptor(%+v)", *p)
}
