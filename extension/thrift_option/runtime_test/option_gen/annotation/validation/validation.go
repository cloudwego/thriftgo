// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by thriftgo (0.3.2-option-exp). DO NOT EDIT.

package validation

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/extension/thrift_option"
)

const (
	HELLO = "hello there"
)

type MyEnum int64

const (
	MyEnum_X   MyEnum = 0
	MyEnum_XL  MyEnum = 1
	MyEnum_XXL MyEnum = 2
)

func (p MyEnum) String() string {
	switch p {
	case MyEnum_X:
		return "X"
	case MyEnum_XL:
		return "XL"
	case MyEnum_XXL:
		return "XXL"
	}
	return "<UNSET>"
}

func MyEnumFromString(s string) (MyEnum, error) {
	switch s {
	case "X":
		return MyEnum_X, nil
	case "XL":
		return MyEnum_XL, nil
	case "XXL":
		return MyEnum_XXL, nil
	}
	return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

func MyEnumPtr(v MyEnum) *MyEnum { return &v }
func (p *MyEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = MyEnum(result.Int64)
	return
}

func (p *MyEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type MyBasicTypedef = string

type MyStructTypedef = TestInfo

func NewMyStructTypedef() *MyStructTypedef {
	return (*MyStructTypedef)(NewTestInfo())
}

type _StructOptions struct {
	PersonStringInfo             string                  `thrift:"person_string_info,1,required" json:"person_string_info"`
	PersonMapInfo                map[string]string       `thrift:"person_map_info,2,required" json:"person_map_info"`
	PersonEnumInfo               MyEnum                  `thrift:"person_enum_info,3,required" json:"person_enum_info"`
	PersonBasicTypedefInfo       MyBasicTypedef          `thrift:"person_basic_typedef_info,4,required" json:"person_basic_typedef_info"`
	PersonStructTypedefInfo      *MyStructTypedef        `thrift:"person_struct_typedef_info,5,required" json:"person_struct_typedef_info"`
	PersonStructDefaultValueInfo *MyStructWithDefaultVal `thrift:"person_struct_default_value_info,6,required" json:"person_struct_default_value_info"`
}

func New_StructOptions() *_StructOptions {
	return &_StructOptions{}
}

func (p *_StructOptions) GetPersonStringInfo() (v string) {
	return p.PersonStringInfo
}

func (p *_StructOptions) GetPersonMapInfo() (v map[string]string) {
	return p.PersonMapInfo
}

func (p *_StructOptions) GetPersonEnumInfo() (v MyEnum) {
	return p.PersonEnumInfo
}

func (p *_StructOptions) GetPersonBasicTypedefInfo() (v MyBasicTypedef) {
	return p.PersonBasicTypedefInfo
}

var _StructOptions_PersonStructTypedefInfo_DEFAULT *MyStructTypedef

func (p *_StructOptions) GetPersonStructTypedefInfo() (v *MyStructTypedef) {
	if !p.IsSetPersonStructTypedefInfo() {
		return _StructOptions_PersonStructTypedefInfo_DEFAULT
	}
	return p.PersonStructTypedefInfo
}

var _StructOptions_PersonStructDefaultValueInfo_DEFAULT *MyStructWithDefaultVal

func (p *_StructOptions) GetPersonStructDefaultValueInfo() (v *MyStructWithDefaultVal) {
	if !p.IsSetPersonStructDefaultValueInfo() {
		return _StructOptions_PersonStructDefaultValueInfo_DEFAULT
	}
	return p.PersonStructDefaultValueInfo
}

var fieldIDToName__StructOptions = map[int16]string{
	1: "person_string_info",
	2: "person_map_info",
	3: "person_enum_info",
	4: "person_basic_typedef_info",
	5: "person_struct_typedef_info",
	6: "person_struct_default_value_info",
}

func (p *_StructOptions) IsSetPersonStructTypedefInfo() bool {
	return p.PersonStructTypedefInfo != nil
}

func (p *_StructOptions) IsSetPersonStructDefaultValueInfo() bool {
	return p.PersonStructDefaultValueInfo != nil
}

func (p *_StructOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPersonStringInfo bool = false
	var issetPersonMapInfo bool = false
	var issetPersonEnumInfo bool = false
	var issetPersonBasicTypedefInfo bool = false
	var issetPersonStructTypedefInfo bool = false
	var issetPersonStructDefaultValueInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonStringInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonMapInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonEnumInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonBasicTypedefInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonStructTypedefInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonStructDefaultValueInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPersonStringInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPersonMapInfo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPersonEnumInfo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPersonBasicTypedefInfo {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPersonStructTypedefInfo {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetPersonStructDefaultValueInfo {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__StructOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__StructOptions[fieldId]))
}

func (p *_StructOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PersonStringInfo = v
	}
	return nil
}

func (p *_StructOptions) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.PersonMapInfo = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.PersonMapInfo[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *_StructOptions) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PersonEnumInfo = MyEnum(v)
	}
	return nil
}

func (p *_StructOptions) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PersonBasicTypedefInfo = v
	}
	return nil
}

func (p *_StructOptions) ReadField5(iprot thrift.TProtocol) error {
	p.PersonStructTypedefInfo = NewMyStructTypedef()
	if err := p.PersonStructTypedefInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_StructOptions) ReadField6(iprot thrift.TProtocol) error {
	p.PersonStructDefaultValueInfo = NewMyStructWithDefaultVal()
	if err := p.PersonStructDefaultValueInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_StructOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_StructOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_StructOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_string_info", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PersonStringInfo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_StructOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_map_info", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PersonMapInfo)); err != nil {
		return err
	}
	for k, v := range p.PersonMapInfo {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *_StructOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_enum_info", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.PersonEnumInfo)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *_StructOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_basic_typedef_info", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PersonBasicTypedefInfo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *_StructOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_struct_typedef_info", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PersonStructTypedefInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *_StructOptions) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_struct_default_value_info", thrift.STRUCT, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PersonStructDefaultValueInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *_StructOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_StructOptions(%+v)", *p)
}

type MyStructWithDefaultVal struct {
	V1  string            `thrift:"v1,1,required" json:"v1"`
	V2  string            `thrift:"v2,2,required" json:"v2"`
	V3  int8              `thrift:"v3,3,required" json:"v3"`
	V4  int16             `thrift:"v4,4,required" json:"v4"`
	V5  int32             `thrift:"v5,5,required" json:"v5"`
	V6  int64             `thrift:"v6,6,required" json:"v6"`
	V7  bool              `thrift:"v7,7,required" json:"v7"`
	V8  float64           `thrift:"v8,8,required" json:"v8"`
	V9  map[string]string `thrift:"v9,9,required" json:"v9"`
	V10 []string          `thrift:"v10,10,required" json:"v10"`
	V11 string            `thrift:"v11,11,required" json:"v11"`
}

func NewMyStructWithDefaultVal() *MyStructWithDefaultVal {
	return &MyStructWithDefaultVal{

		V2: "v2",
		V3: 8,
		V4: 16,
		V5: 32,
		V6: 64,
		V7: true,
		V8: 3.1415926123456,
		V9: map[string]string{
			"k1": "v1",
		},
		V10: []string{
			"k1",
			"k2",
		},
		V11: HELLO,
	}
}

func (p *MyStructWithDefaultVal) GetV1() (v string) {
	return p.V1
}

func (p *MyStructWithDefaultVal) GetV2() (v string) {
	return p.V2
}

func (p *MyStructWithDefaultVal) GetV3() (v int8) {
	return p.V3
}

func (p *MyStructWithDefaultVal) GetV4() (v int16) {
	return p.V4
}

func (p *MyStructWithDefaultVal) GetV5() (v int32) {
	return p.V5
}

func (p *MyStructWithDefaultVal) GetV6() (v int64) {
	return p.V6
}

func (p *MyStructWithDefaultVal) GetV7() (v bool) {
	return p.V7
}

func (p *MyStructWithDefaultVal) GetV8() (v float64) {
	return p.V8
}

func (p *MyStructWithDefaultVal) GetV9() (v map[string]string) {
	return p.V9
}

func (p *MyStructWithDefaultVal) GetV10() (v []string) {
	return p.V10
}

func (p *MyStructWithDefaultVal) GetV11() (v string) {
	return p.V11
}

var fieldIDToName_MyStructWithDefaultVal = map[int16]string{
	1:  "v1",
	2:  "v2",
	3:  "v3",
	4:  "v4",
	5:  "v5",
	6:  "v6",
	7:  "v7",
	8:  "v8",
	9:  "v9",
	10: "v10",
	11: "v11",
}

func (p *MyStructWithDefaultVal) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetV1 bool = false
	var issetV2 bool = false
	var issetV3 bool = false
	var issetV4 bool = false
	var issetV5 bool = false
	var issetV6 bool = false
	var issetV7 bool = false
	var issetV8 bool = false
	var issetV9 bool = false
	var issetV10 bool = false
	var issetV11 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetV1 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetV2 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetV3 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetV4 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetV5 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetV6 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetV7 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetV8 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetV9 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetV10 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetV11 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetV1 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetV2 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetV3 {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetV4 {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetV5 {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetV6 {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetV7 {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetV8 {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetV9 {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetV10 {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetV11 {
		fieldId = 11
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyStructWithDefaultVal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MyStructWithDefaultVal[fieldId]))
}

func (p *MyStructWithDefaultVal) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.V1 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.V2 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.V3 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.V4 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.V5 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.V6 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.V7 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.V8 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField9(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.V9 = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.V9[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.V10 = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.V10 = append(p.V10, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *MyStructWithDefaultVal) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.V11 = v
	}
	return nil
}

func (p *MyStructWithDefaultVal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MyStructWithDefaultVal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v1", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.V1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v2", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.V2); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v3", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.V3); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v4", thrift.I16, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.V4); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v5", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.V5); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v6", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.V6); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v7", thrift.BOOL, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.V7); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v8", thrift.DOUBLE, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.V8); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v9", thrift.MAP, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.V9)); err != nil {
		return err
	}
	for k, v := range p.V9 {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v10", thrift.LIST, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.V10)); err != nil {
		return err
	}
	for _, v := range p.V10 {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("v11", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.V11); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *MyStructWithDefaultVal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyStructWithDefaultVal(%+v)", *p)
}

type _FieldOptions struct {
	CardFieldInfo string `thrift:"card_field_info,1,required" json:"card_field_info"`
}

func New_FieldOptions() *_FieldOptions {
	return &_FieldOptions{}
}

func (p *_FieldOptions) GetCardFieldInfo() (v string) {
	return p.CardFieldInfo
}

var fieldIDToName__FieldOptions = map[int16]string{
	1: "card_field_info",
}

func (p *_FieldOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCardFieldInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCardFieldInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCardFieldInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__FieldOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__FieldOptions[fieldId]))
}

func (p *_FieldOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CardFieldInfo = v
	}
	return nil
}

func (p *_FieldOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_FieldOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_FieldOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("card_field_info", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CardFieldInfo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_FieldOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FieldOptions(%+v)", *p)
}

type TestInfo struct {
	Name   string `thrift:"name,1,required" json:"name"`
	Number int16  `thrift:"number,2,required" json:"number"`
}

func NewTestInfo() *TestInfo {
	return &TestInfo{}
}

func (p *TestInfo) GetName() (v string) {
	return p.Name
}

func (p *TestInfo) GetNumber() (v int16) {
	return p.Number
}

var fieldIDToName_TestInfo = map[int16]string{
	1: "name",
	2: "number",
}

func (p *TestInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetNumber bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumber = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNumber {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TestInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TestInfo[fieldId]))
}

func (p *TestInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *TestInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Number = v
	}
	return nil
}

func (p *TestInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TestInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TestInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("number", thrift.I16, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Number); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TestInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestInfo(%+v)", *p)
}

type _ServiceOptions struct {
	SvcInfo *TestInfo `thrift:"svc_info,1,required" json:"svc_info"`
}

func New_ServiceOptions() *_ServiceOptions {
	return &_ServiceOptions{}
}

var _ServiceOptions_SvcInfo_DEFAULT *TestInfo

func (p *_ServiceOptions) GetSvcInfo() (v *TestInfo) {
	if !p.IsSetSvcInfo() {
		return _ServiceOptions_SvcInfo_DEFAULT
	}
	return p.SvcInfo
}

var fieldIDToName__ServiceOptions = map[int16]string{
	1: "svc_info",
}

func (p *_ServiceOptions) IsSetSvcInfo() bool {
	return p.SvcInfo != nil
}

func (p *_ServiceOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSvcInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSvcInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSvcInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__ServiceOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__ServiceOptions[fieldId]))
}

func (p *_ServiceOptions) ReadField1(iprot thrift.TProtocol) error {
	p.SvcInfo = NewTestInfo()
	if err := p.SvcInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_ServiceOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_ServiceOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_ServiceOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("svc_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.SvcInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_ServiceOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_ServiceOptions(%+v)", *p)
}

type _MethodOptions struct {
	MethodInfo *TestInfo `thrift:"method_info,1,required" json:"method_info"`
}

func New_MethodOptions() *_MethodOptions {
	return &_MethodOptions{}
}

var _MethodOptions_MethodInfo_DEFAULT *TestInfo

func (p *_MethodOptions) GetMethodInfo() (v *TestInfo) {
	if !p.IsSetMethodInfo() {
		return _MethodOptions_MethodInfo_DEFAULT
	}
	return p.MethodInfo
}

var fieldIDToName__MethodOptions = map[int16]string{
	1: "method_info",
}

func (p *_MethodOptions) IsSetMethodInfo() bool {
	return p.MethodInfo != nil
}

func (p *_MethodOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMethodInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMethodInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMethodInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__MethodOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__MethodOptions[fieldId]))
}

func (p *_MethodOptions) ReadField1(iprot thrift.TProtocol) error {
	p.MethodInfo = NewTestInfo()
	if err := p.MethodInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_MethodOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_MethodOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_MethodOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("method_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.MethodInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_MethodOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_MethodOptions(%+v)", *p)
}

type _EnumOptions struct {
	EnumInfo *TestInfo `thrift:"enum_info,1,required" json:"enum_info"`
}

func New_EnumOptions() *_EnumOptions {
	return &_EnumOptions{}
}

var _EnumOptions_EnumInfo_DEFAULT *TestInfo

func (p *_EnumOptions) GetEnumInfo() (v *TestInfo) {
	if !p.IsSetEnumInfo() {
		return _EnumOptions_EnumInfo_DEFAULT
	}
	return p.EnumInfo
}

var fieldIDToName__EnumOptions = map[int16]string{
	1: "enum_info",
}

func (p *_EnumOptions) IsSetEnumInfo() bool {
	return p.EnumInfo != nil
}

func (p *_EnumOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEnumInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnumInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEnumInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__EnumOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__EnumOptions[fieldId]))
}

func (p *_EnumOptions) ReadField1(iprot thrift.TProtocol) error {
	p.EnumInfo = NewTestInfo()
	if err := p.EnumInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_EnumOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_EnumOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_EnumOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enum_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EnumInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_EnumOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_EnumOptions(%+v)", *p)
}

type _EnumValueOptions struct {
	EnumValueInfo *TestInfo `thrift:"enum_value_info,1,required" json:"enum_value_info"`
}

func New_EnumValueOptions() *_EnumValueOptions {
	return &_EnumValueOptions{}
}

var _EnumValueOptions_EnumValueInfo_DEFAULT *TestInfo

func (p *_EnumValueOptions) GetEnumValueInfo() (v *TestInfo) {
	if !p.IsSetEnumValueInfo() {
		return _EnumValueOptions_EnumValueInfo_DEFAULT
	}
	return p.EnumValueInfo
}

var fieldIDToName__EnumValueOptions = map[int16]string{
	1: "enum_value_info",
}

func (p *_EnumValueOptions) IsSetEnumValueInfo() bool {
	return p.EnumValueInfo != nil
}

func (p *_EnumValueOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEnumValueInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEnumValueInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEnumValueInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__EnumValueOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__EnumValueOptions[fieldId]))
}

func (p *_EnumValueOptions) ReadField1(iprot thrift.TProtocol) error {
	p.EnumValueInfo = NewTestInfo()
	if err := p.EnumValueInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_EnumValueOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_EnumValueOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_EnumValueOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("enum_value_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EnumValueInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_EnumValueOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_EnumValueOptions(%+v)", *p)
}

var (
	STRUCT_OPTION_PERSON_STRING_INFO               = thrift_option.NewStructOption("../option_idl/annotations/validation/validation.thrift", "person_string_info")
	STRUCT_OPTION_PERSON_MAP_INFO                  = thrift_option.NewStructOption("../option_idl/annotations/validation/validation.thrift", "person_map_info")
	STRUCT_OPTION_PERSON_ENUM_INFO                 = thrift_option.NewStructOption("../option_idl/annotations/validation/validation.thrift", "person_enum_info")
	STRUCT_OPTION_PERSON_BASIC_TYPEDEF_INFO        = thrift_option.NewStructOption("../option_idl/annotations/validation/validation.thrift", "person_basic_typedef_info")
	STRUCT_OPTION_PERSON_STRUCT_TYPEDEF_INFO       = thrift_option.NewStructOption("../option_idl/annotations/validation/validation.thrift", "person_struct_typedef_info")
	STRUCT_OPTION_PERSON_STRUCT_DEFAULT_VALUE_INFO = thrift_option.NewStructOption("../option_idl/annotations/validation/validation.thrift", "person_struct_default_value_info")
	FIELD_OPTION_CARD_FIELD_INFO                   = thrift_option.NewFieldOption("../option_idl/annotations/validation/validation.thrift", "card_field_info")
	SERVICE_OPTION_SVC_INFO                        = thrift_option.NewServiceOption("../option_idl/annotations/validation/validation.thrift", "svc_info")
	METHOD_OPTION_METHOD_INFO                      = thrift_option.NewMethodOption("../option_idl/annotations/validation/validation.thrift", "method_info")
	ENUM_OPTION_ENUM_INFO                          = thrift_option.NewEnumOption("../option_idl/annotations/validation/validation.thrift", "enum_info")
	ENUM_VALUE_OPTION_ENUM_VALUE_INFO              = thrift_option.NewEnumValueOption("../option_idl/annotations/validation/validation.thrift", "enum_value_info")
)
