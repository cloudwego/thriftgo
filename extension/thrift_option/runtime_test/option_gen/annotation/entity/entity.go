// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by thriftgo (0.3.2-option-exp). DO NOT EDIT.

package entity

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/extension/thrift_option"
	"reflect"
)

type TestEnum int64

const (
	TestEnum_A TestEnum = 0
	TestEnum_B TestEnum = 1
	TestEnum_C TestEnum = 2
)

func (p TestEnum) String() string {
	switch p {
	case TestEnum_A:
		return "A"
	case TestEnum_B:
		return "B"
	case TestEnum_C:
		return "C"
	}
	return "<UNSET>"
}

func TestEnumFromString(s string) (TestEnum, error) {
	switch s {
	case "A":
		return TestEnum_A, nil
	case "B":
		return TestEnum_B, nil
	case "C":
		return TestEnum_C, nil
	}
	return TestEnum(0), fmt.Errorf("not a valid TestEnum string")
}

func TestEnumPtr(v TestEnum) *TestEnum { return &v }
func (p *TestEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TestEnum(result.Int64)
	return
}

func (p *TestEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TestStructTypedef = InnerStruct

func NewTestStructTypedef() *TestStructTypedef {
	return (*TestStructTypedef)(NewInnerStruct())
}

type TestBasicTypedef = string

type _StructOptions struct {
	PersonBasicInfo     *PersonBasicInfo     `thrift:"person_basic_info,1,required" json:"person_basic_info"`
	PersonStructInfo    *PersonStructInfo    `thrift:"person_struct_info,2,required" json:"person_struct_info"`
	PersonContainerInfo *PersonContainerInfo `thrift:"person_container_info,3,required" json:"person_container_info"`
}

func New_StructOptions() *_StructOptions {
	return &_StructOptions{}
}

var _StructOptions_PersonBasicInfo_DEFAULT *PersonBasicInfo

func (p *_StructOptions) GetPersonBasicInfo() (v *PersonBasicInfo) {
	if !p.IsSetPersonBasicInfo() {
		return _StructOptions_PersonBasicInfo_DEFAULT
	}
	return p.PersonBasicInfo
}

var _StructOptions_PersonStructInfo_DEFAULT *PersonStructInfo

func (p *_StructOptions) GetPersonStructInfo() (v *PersonStructInfo) {
	if !p.IsSetPersonStructInfo() {
		return _StructOptions_PersonStructInfo_DEFAULT
	}
	return p.PersonStructInfo
}

var _StructOptions_PersonContainerInfo_DEFAULT *PersonContainerInfo

func (p *_StructOptions) GetPersonContainerInfo() (v *PersonContainerInfo) {
	if !p.IsSetPersonContainerInfo() {
		return _StructOptions_PersonContainerInfo_DEFAULT
	}
	return p.PersonContainerInfo
}

var fieldIDToName__StructOptions = map[int16]string{
	1: "person_basic_info",
	2: "person_struct_info",
	3: "person_container_info",
}

func (p *_StructOptions) IsSetPersonBasicInfo() bool {
	return p.PersonBasicInfo != nil
}

func (p *_StructOptions) IsSetPersonStructInfo() bool {
	return p.PersonStructInfo != nil
}

func (p *_StructOptions) IsSetPersonContainerInfo() bool {
	return p.PersonContainerInfo != nil
}

func (p *_StructOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPersonBasicInfo bool = false
	var issetPersonStructInfo bool = false
	var issetPersonContainerInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonBasicInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonStructInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonContainerInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPersonBasicInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetPersonStructInfo {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPersonContainerInfo {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__StructOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__StructOptions[fieldId]))
}

func (p *_StructOptions) ReadField1(iprot thrift.TProtocol) error {
	p.PersonBasicInfo = NewPersonBasicInfo()
	if err := p.PersonBasicInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_StructOptions) ReadField2(iprot thrift.TProtocol) error {
	p.PersonStructInfo = NewPersonStructInfo()
	if err := p.PersonStructInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_StructOptions) ReadField3(iprot thrift.TProtocol) error {
	p.PersonContainerInfo = NewPersonContainerInfo()
	if err := p.PersonContainerInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *_StructOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_StructOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_StructOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_basic_info", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PersonBasicInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_StructOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_struct_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PersonStructInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *_StructOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_container_info", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PersonContainerInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *_StructOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_StructOptions(%+v)", *p)
}

type _FieldOptions struct {
	PersonFieldInfo string `thrift:"person_field_info,1,required" json:"person_field_info"`
}

func New_FieldOptions() *_FieldOptions {
	return &_FieldOptions{}
}

func (p *_FieldOptions) GetPersonFieldInfo() (v string) {
	return p.PersonFieldInfo
}

var fieldIDToName__FieldOptions = map[int16]string{
	1: "person_field_info",
}

func (p *_FieldOptions) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPersonFieldInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetPersonFieldInfo = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPersonFieldInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName__FieldOptions[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName__FieldOptions[fieldId]))
}

func (p *_FieldOptions) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PersonFieldInfo = v
	}
	return nil
}

func (p *_FieldOptions) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("_FieldOptions"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *_FieldOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("person_field_info", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PersonFieldInfo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *_FieldOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("_FieldOptions(%+v)", *p)
}

type PersonBasicInfo struct {
	Valuei8     int8    `thrift:"valuei8,1,required" json:"valuei8"`
	Valuei16    int16   `thrift:"valuei16,2,required" json:"valuei16"`
	Valuei32    int32   `thrift:"valuei32,3,required" json:"valuei32"`
	Valuei64    int64   `thrift:"valuei64,4,required" json:"valuei64"`
	Valuestring string  `thrift:"valuestring,5,required" json:"valuestring"`
	Valuebyte   int8    `thrift:"valuebyte,6,required" json:"valuebyte"`
	Valuedouble float64 `thrift:"valuedouble,7,required" json:"valuedouble"`
	Valuebinary []byte  `thrift:"valuebinary,8,required" json:"valuebinary"`
	Valuebool   bool    `thrift:"valuebool,9,required" json:"valuebool"`
}

func NewPersonBasicInfo() *PersonBasicInfo {
	return &PersonBasicInfo{}
}

func (p *PersonBasicInfo) GetValuei8() (v int8) {
	return p.Valuei8
}

func (p *PersonBasicInfo) GetValuei16() (v int16) {
	return p.Valuei16
}

func (p *PersonBasicInfo) GetValuei32() (v int32) {
	return p.Valuei32
}

func (p *PersonBasicInfo) GetValuei64() (v int64) {
	return p.Valuei64
}

func (p *PersonBasicInfo) GetValuestring() (v string) {
	return p.Valuestring
}

func (p *PersonBasicInfo) GetValuebyte() (v int8) {
	return p.Valuebyte
}

func (p *PersonBasicInfo) GetValuedouble() (v float64) {
	return p.Valuedouble
}

func (p *PersonBasicInfo) GetValuebinary() (v []byte) {
	return p.Valuebinary
}

func (p *PersonBasicInfo) GetValuebool() (v bool) {
	return p.Valuebool
}

var fieldIDToName_PersonBasicInfo = map[int16]string{
	1: "valuei8",
	2: "valuei16",
	3: "valuei32",
	4: "valuei64",
	5: "valuestring",
	6: "valuebyte",
	7: "valuedouble",
	8: "valuebinary",
	9: "valuebool",
}

func (p *PersonBasicInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValuei8 bool = false
	var issetValuei16 bool = false
	var issetValuei32 bool = false
	var issetValuei64 bool = false
	var issetValuestring bool = false
	var issetValuebyte bool = false
	var issetValuedouble bool = false
	var issetValuebinary bool = false
	var issetValuebool bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuei8 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuei16 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuei32 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuei64 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuestring = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuebyte = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuedouble = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuebinary = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuebool = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValuei8 {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValuei16 {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValuei32 {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetValuei64 {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetValuestring {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetValuebyte {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetValuedouble {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetValuebinary {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetValuebool {
		fieldId = 9
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonBasicInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonBasicInfo[fieldId]))
}

func (p *PersonBasicInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Valuei8 = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Valuei16 = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Valuei32 = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Valuei64 = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Valuestring = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Valuebyte = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.Valuedouble = v
	}
	return nil
}

func (p *PersonBasicInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Valuebinary = []byte(v)
	}
	return nil
}

func (p *PersonBasicInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.Valuebool = v
	}
	return nil
}

func (p *PersonBasicInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonBasicInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonBasicInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuei8", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Valuei8); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuei16", thrift.I16, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Valuei16); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuei32", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Valuei32); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuei64", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Valuei64); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuestring", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Valuestring); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuebyte", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Valuebyte); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuedouble", thrift.DOUBLE, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Valuedouble); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuebinary", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Valuebinary)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PersonBasicInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuebool", thrift.BOOL, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Valuebool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *PersonBasicInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonBasicInfo(%+v)", *p)
}

type PersonContainerInfo struct {
	Valuemap           map[string]string       `thrift:"valuemap,1,required" json:"valuemap"`
	Valuelist          []string                `thrift:"valuelist,2,required" json:"valuelist"`
	Valueset           []string                `thrift:"valueset,3,required" json:"valueset"`
	Valuelistset       [][]string              `thrift:"valuelistset,4,required" json:"valuelistset"`
	Valuelistsetstruct [][]*InnerStruct        `thrift:"valuelistsetstruct,5,required" json:"valuelistsetstruct"`
	Valuemapstruct     map[string]*InnerStruct `thrift:"valuemapstruct,6,required" json:"valuemapstruct"`
}

func NewPersonContainerInfo() *PersonContainerInfo {
	return &PersonContainerInfo{}
}

func (p *PersonContainerInfo) GetValuemap() (v map[string]string) {
	return p.Valuemap
}

func (p *PersonContainerInfo) GetValuelist() (v []string) {
	return p.Valuelist
}

func (p *PersonContainerInfo) GetValueset() (v []string) {
	return p.Valueset
}

func (p *PersonContainerInfo) GetValuelistset() (v [][]string) {
	return p.Valuelistset
}

func (p *PersonContainerInfo) GetValuelistsetstruct() (v [][]*InnerStruct) {
	return p.Valuelistsetstruct
}

func (p *PersonContainerInfo) GetValuemapstruct() (v map[string]*InnerStruct) {
	return p.Valuemapstruct
}

var fieldIDToName_PersonContainerInfo = map[int16]string{
	1: "valuemap",
	2: "valuelist",
	3: "valueset",
	4: "valuelistset",
	5: "valuelistsetstruct",
	6: "valuemapstruct",
}

func (p *PersonContainerInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValuemap bool = false
	var issetValuelist bool = false
	var issetValueset bool = false
	var issetValuelistset bool = false
	var issetValuelistsetstruct bool = false
	var issetValuemapstruct bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuemap = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuelist = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValueset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuelistset = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuelistsetstruct = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuemapstruct = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValuemap {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValuelist {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValueset {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetValuelistset {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetValuelistsetstruct {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetValuemapstruct {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonContainerInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonContainerInfo[fieldId]))
}

func (p *PersonContainerInfo) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Valuemap = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Valuemap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PersonContainerInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Valuelist = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Valuelist = append(p.Valuelist, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PersonContainerInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.Valueset = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Valueset = append(p.Valueset, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PersonContainerInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Valuelistset = make([][]string, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_elem := make([]string, 0, size)
		for i := 0; i < size; i++ {
			var _elem1 string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem1 = v
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		p.Valuelistset = append(p.Valuelistset, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PersonContainerInfo) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Valuelistsetstruct = make([][]*InnerStruct, 0, size)
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return err
		}
		_elem := make([]*InnerStruct, 0, size)
		for i := 0; i < size; i++ {
			_elem1 := NewInnerStruct()
			if err := _elem1.Read(iprot); err != nil {
				return err
			}

			_elem = append(_elem, _elem1)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return err
		}

		p.Valuelistsetstruct = append(p.Valuelistsetstruct, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PersonContainerInfo) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Valuemapstruct = make(map[string]*InnerStruct, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewInnerStruct()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.Valuemapstruct[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PersonContainerInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonContainerInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonContainerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuemap", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Valuemap)); err != nil {
		return err
	}
	for k, v := range p.Valuemap {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonContainerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuelist", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Valuelist)); err != nil {
		return err
	}
	for _, v := range p.Valuelist {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PersonContainerInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valueset", thrift.SET, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Valueset)); err != nil {
		return err
	}
	for i := 0; i < len(p.Valueset); i++ {
		for j := i + 1; j < len(p.Valueset); j++ {
			if reflect.DeepEqual(p.Valueset[i], p.Valueset[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Valueset[i]))
			}
		}
	}
	for _, v := range p.Valueset {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PersonContainerInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuelistset", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.SET, len(p.Valuelistset)); err != nil {
		return err
	}
	for _, v := range p.Valuelistset {
		if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
			return err
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if reflect.DeepEqual(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PersonContainerInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuelistsetstruct", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.SET, len(p.Valuelistsetstruct)); err != nil {
		return err
	}
	for _, v := range p.Valuelistsetstruct {
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(v)); err != nil {
			return err
		}
		for i := 0; i < len(v); i++ {
			for j := i + 1; j < len(v); j++ {
				if reflect.DeepEqual(v[i], v[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
				}
			}
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PersonContainerInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuemapstruct", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Valuemapstruct)); err != nil {
		return err
	}
	for k, v := range p.Valuemapstruct {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PersonContainerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonContainerInfo(%+v)", *p)
}

type PersonStructInfo struct {
	Valueteststruct    *TestStruct        `thrift:"valueteststruct,1,required" json:"valueteststruct"`
	Valuestruct        *InnerStruct       `thrift:"valuestruct,2,required" json:"valuestruct"`
	Valueenum          TestEnum           `thrift:"valueenum,3,required" json:"valueenum"`
	Valuestructtypedef *TestStructTypedef `thrift:"valuestructtypedef,4,required" json:"valuestructtypedef"`
	Valuebasictypedef  TestBasicTypedef   `thrift:"valuebasictypedef,5,required" json:"valuebasictypedef"`
}

func NewPersonStructInfo() *PersonStructInfo {
	return &PersonStructInfo{}
}

var PersonStructInfo_Valueteststruct_DEFAULT *TestStruct

func (p *PersonStructInfo) GetValueteststruct() (v *TestStruct) {
	if !p.IsSetValueteststruct() {
		return PersonStructInfo_Valueteststruct_DEFAULT
	}
	return p.Valueteststruct
}

var PersonStructInfo_Valuestruct_DEFAULT *InnerStruct

func (p *PersonStructInfo) GetValuestruct() (v *InnerStruct) {
	if !p.IsSetValuestruct() {
		return PersonStructInfo_Valuestruct_DEFAULT
	}
	return p.Valuestruct
}

func (p *PersonStructInfo) GetValueenum() (v TestEnum) {
	return p.Valueenum
}

var PersonStructInfo_Valuestructtypedef_DEFAULT *TestStructTypedef

func (p *PersonStructInfo) GetValuestructtypedef() (v *TestStructTypedef) {
	if !p.IsSetValuestructtypedef() {
		return PersonStructInfo_Valuestructtypedef_DEFAULT
	}
	return p.Valuestructtypedef
}

func (p *PersonStructInfo) GetValuebasictypedef() (v TestBasicTypedef) {
	return p.Valuebasictypedef
}

var fieldIDToName_PersonStructInfo = map[int16]string{
	1: "valueteststruct",
	2: "valuestruct",
	3: "valueenum",
	4: "valuestructtypedef",
	5: "valuebasictypedef",
}

func (p *PersonStructInfo) IsSetValueteststruct() bool {
	return p.Valueteststruct != nil
}

func (p *PersonStructInfo) IsSetValuestruct() bool {
	return p.Valuestruct != nil
}

func (p *PersonStructInfo) IsSetValuestructtypedef() bool {
	return p.Valuestructtypedef != nil
}

func (p *PersonStructInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValueteststruct bool = false
	var issetValuestruct bool = false
	var issetValueenum bool = false
	var issetValuestructtypedef bool = false
	var issetValuebasictypedef bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValueteststruct = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuestruct = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetValueenum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuestructtypedef = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetValuebasictypedef = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValueteststruct {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetValuestruct {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetValueenum {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetValuestructtypedef {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetValuebasictypedef {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonStructInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonStructInfo[fieldId]))
}

func (p *PersonStructInfo) ReadField1(iprot thrift.TProtocol) error {
	p.Valueteststruct = NewTestStruct()
	if err := p.Valueteststruct.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PersonStructInfo) ReadField2(iprot thrift.TProtocol) error {
	p.Valuestruct = NewInnerStruct()
	if err := p.Valuestruct.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PersonStructInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Valueenum = TestEnum(v)
	}
	return nil
}

func (p *PersonStructInfo) ReadField4(iprot thrift.TProtocol) error {
	p.Valuestructtypedef = NewTestStructTypedef()
	if err := p.Valuestructtypedef.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PersonStructInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Valuebasictypedef = v
	}
	return nil
}

func (p *PersonStructInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonStructInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonStructInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valueteststruct", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Valueteststruct.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonStructInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuestruct", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Valuestruct.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PersonStructInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valueenum", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Valueenum)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PersonStructInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuestructtypedef", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Valuestructtypedef.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PersonStructInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valuebasictypedef", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Valuebasictypedef); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PersonStructInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonStructInfo(%+v)", *p)
}

type TestStruct struct {
	Name        string       `thrift:"name,1,required" json:"name"`
	Age         string       `thrift:"age,2,required" json:"age"`
	InnerStruct *InnerStruct `thrift:"innerStruct,3,required" json:"innerStruct"`
}

func NewTestStruct() *TestStruct {
	return &TestStruct{}
}

func (p *TestStruct) GetName() (v string) {
	return p.Name
}

func (p *TestStruct) GetAge() (v string) {
	return p.Age
}

var TestStruct_InnerStruct_DEFAULT *InnerStruct

func (p *TestStruct) GetInnerStruct() (v *InnerStruct) {
	if !p.IsSetInnerStruct() {
		return TestStruct_InnerStruct_DEFAULT
	}
	return p.InnerStruct
}

var fieldIDToName_TestStruct = map[int16]string{
	1: "name",
	2: "age",
	3: "innerStruct",
}

func (p *TestStruct) IsSetInnerStruct() bool {
	return p.InnerStruct != nil
}

func (p *TestStruct) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetAge bool = false
	var issetInnerStruct bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAge = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInnerStruct = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAge {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetInnerStruct {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TestStruct[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TestStruct[fieldId]))
}

func (p *TestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *TestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Age = v
	}
	return nil
}

func (p *TestStruct) ReadField3(iprot thrift.TProtocol) error {
	p.InnerStruct = NewInnerStruct()
	if err := p.InnerStruct.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *TestStruct) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TestStruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("innerStruct", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InnerStruct.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestStruct(%+v)", *p)
}

var (
	STRUCT_OPTION_PERSON_BASIC_INFO     = thrift_option.NewStructOption("../option_idl/annotations/entity/entity.thrift", "person_basic_info")
	STRUCT_OPTION_PERSON_STRUCT_INFO    = thrift_option.NewStructOption("../option_idl/annotations/entity/entity.thrift", "person_struct_info")
	STRUCT_OPTION_PERSON_CONTAINER_INFO = thrift_option.NewStructOption("../option_idl/annotations/entity/entity.thrift", "person_container_info")
	FIELD_OPTION_PERSON_FIELD_INFO      = thrift_option.NewFieldOption("../option_idl/annotations/entity/entity.thrift", "person_field_info")
)
