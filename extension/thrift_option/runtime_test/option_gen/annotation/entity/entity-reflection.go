// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by thriftgo (0.3.15). DO NOT EDIT.

package entity

import (
	"reflect"

	"github.com/cloudwego/thriftgo/thrift_reflection"
)

// IDL Name: entity
// IDL Path: ../option_idl/annotations/entity/entity.thrift

var file_entity_thrift_go_types = []interface{}{
	(*_StructOptions)(nil),      // Struct 0: entity._StructOptions
	(*_FieldOptions)(nil),       // Struct 1: entity._FieldOptions
	(*PersonBasicInfo)(nil),     // Struct 2: entity.PersonBasicInfo
	(*PersonContainerInfo)(nil), // Struct 3: entity.PersonContainerInfo
	(*PersonStructInfo)(nil),    // Struct 4: entity.PersonStructInfo
	(*TestStruct)(nil),          // Struct 5: entity.TestStruct
	(*TestEnum)(nil),            // Enum 0: entity.TestEnum
	(*TestStructTypedef)(nil),   // Enum 0: entity.TestStructTypedef
	(*TestBasicTypedef)(nil),    // Enum 1: entity.TestBasicTypedef
}
var file_entity_thrift *thrift_reflection.FileDescriptor
var file_idl_entity_rawDesc = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xdc, 0x59, 0x5f, 0x6f, 0xda, 0x3e,
	0x14, 0xbd, 0x24, 0x1, 0x42, 0x3, 0x4d, 0xdb, 0x9f, 0x7e, 0xf, 0x93, 0xf6, 0x19, 0x82, 0xfa,
	0x67, 0xa8, 0xaf, 0x6b, 0xb5, 0x49, 0x7d, 0xda, 0xb4, 0xf6, 0x3d, 0xa, 0x60, 0x98, 0xa5, 0x60,
	0xb3, 0xc4, 0x99, 0xc4, 0xb7, 0x9f, 0x12, 0x1b, 0x42, 0x47, 0x8a, 0x32, 0xee, 0x4d, 0x34, 0xad,
	0x2f, 0x56, 0x5b, 0xf9, 0x70, 0xce, 0xf1, 0xfd, 0x63, 0x5f, 0x3c, 0xe8, 0x0, 0x40, 0x10, 0x4,
	0x63, 0xb9, 0x56, 0x5c, 0x8a, 0x90, 0xcf, 0xe3, 0x71, 0x24, 0x84, 0x54, 0x51, 0xfe, 0x6b, 0x3a,
	0x66, 0x42, 0x71, 0xb5, 0x31, 0x4b, 0xa0, 0xbe, 0x27, 0x7c, 0xa1, 0x46, 0x60, 0x79, 0x1e, 0x40,
	0xb1, 0x75, 0xa4, 0xff, 0x13, 0xa6, 0x2a, 0xc9, 0x66, 0xa, 0x0, 0x3e, 0xd4, 0xc4, 0x32, 0x3b,
	0x76, 0x90, 0xf6, 0xe, 0xd2, 0x5a, 0x4a, 0x0, 0x78, 0x6f, 0x40, 0x96, 0x4c, 0x4, 0x25, 0x48,
	0xa0, 0x37, 0xfb, 0xe0, 0xc, 0x1, 0x0, 0x7c, 0xe8, 0xe6, 0x6b, 0xef, 0x24, 0x19, 0x1e, 0x58,
	0x0, 0x70, 0x1e, 0x3e, 0x17, 0x44, 0xbe, 0x14, 0x1b, 0x53, 0x1f, 0xec, 0x1c, 0xd1, 0x46, 0x20,
	0x5e, 0xae, 0x59, 0x92, 0x4a, 0x11, 0x4e, 0xa3, 0x94, 0xcf, 0x42, 0x2e, 0x16, 0x72, 0x88, 0xc2,
	0xf3, 0xbf, 0x16, 0x78, 0xf, 0x39, 0xdc, 0x93, 0x58, 0x48, 0xf0, 0xc0, 0x1, 0x0, 0xf7, 0x1b,
	0xfb, 0x91, 0xf1, 0x84, 0xcd, 0x5d, 0xe8, 0xe6, 0xce, 0x8d, 0xa0, 0xef, 0xf9, 0xb9, 0x29, 0x1e,
	0xb8, 0xa0, 0xd7, 0x93, 0x3f, 0xf2, 0xca, 0x48, 0xd0, 0x67, 0x44, 0xa0, 0xe1, 0x42, 0x6b, 0xd0,
	0x56, 0xbf, 0x2d, 0xc2, 0xa2, 0x14, 0xf1, 0xbf, 0x11, 0x31, 0x93, 0x42, 0x45, 0x5c, 0xb0, 0x84,
	0x40, 0xc7, 0x7f, 0x5a, 0xc7, 0xe3, 0x16, 0xf2, 0x6d, 0x29, 0xf6, 0x81, 0x94, 0x11, 0x38, 0xdb,
	0x3f, 0x74, 0xb1, 0xda, 0x46, 0xe1, 0x67, 0xce, 0xe2, 0xf9, 0xeb, 0xa0, 0xed, 0x10, 0x4, 0xed,
	0x22, 0x87, 0x25, 0x30, 0xaa, 0x97, 0xaa, 0x84, 0x8b, 0x65, 0xdd, 0x58, 0xa5, 0xf4, 0xe6, 0xf7,
	0x7c, 0x31, 0xee, 0xc, 0x10, 0x90, 0xfd, 0x9f, 0x51, 0x9c, 0x31, 0x7e, 0x8f, 0xf3, 0xc4, 0xe2,
	0xf7, 0x2d, 0xe4, 0xae, 0xab, 0xb9, 0x5e, 0x4f, 0x70, 0x64, 0x6d, 0x7e, 0x3d, 0x69, 0x21, 0x49,
	0xd, 0xdb, 0xdb, 0x1b, 0x2c, 0xdb, 0xdb, 0x9b, 0xba, 0x79, 0x88, 0x67, 0x3b, 0xb9, 0xc3, 0xb2,
	0x9d, 0xdc, 0x55, 0xb3, 0x75, 0x28, 0xd9, 0x7a, 0x5, 0x5b, 0x9d, 0x88, 0xd, 0x66, 0x73, 0x97,
	0x92, 0xf3, 0xa0, 0xe0, 0x3c, 0xdd, 0x28, 0x86, 0x63, 0xec, 0xe4, 0x10, 0xd5, 0x7c, 0x7b, 0xf4,
	0x1e, 0xcf, 0x65, 0x36, 0x8d, 0x91, 0x8c, 0x7b, 0x1a, 0xa4, 0x9a, 0x73, 0x9f, 0x9e, 0xf3, 0x94,
	0x8b, 0x28, 0xd9, 0x20, 0x39, 0x6b, 0x90, 0x6a, 0xce, 0x6e, 0x3, 0x71, 0x21, 0x65, 0x8c, 0x8d,
	0xb, 0x29, 0xe3, 0x6a, 0xbe, 0x83, 0x46, 0xbb, 0x52, 0xd5, 0xcd, 0xc1, 0x74, 0x26, 0xcc, 0xf5,
	0x55, 0x57, 0xa4, 0x55, 0xb4, 0x46, 0x56, 0x24, 0x34, 0xc2, 0xb6, 0x44, 0xc, 0xc1, 0x21, 0x40,
	0x69, 0xa1, 0x4f, 0xea, 0x88, 0x8a, 0x79, 0xaa, 0x90, 0x11, 0xa5, 0x21, 0x9a, 0x53, 0xdd, 0x40,
	0xbf, 0x4d, 0x19, 0x52, 0xb4, 0x5d, 0x20, 0x34, 0xa7, 0x99, 0xb4, 0x6b, 0xf, 0x77, 0x27, 0x8d,
	0xd6, 0x4d, 0x70, 0xd8, 0x84, 0xd6, 0xb5, 0x70, 0x87, 0xb8, 0xda, 0xf7, 0x4e, 0x3f, 0x7, 0xff,
	0x1, 0x7, 0xdf, 0xbd, 0x9e, 0x41, 0x3c, 0x9, 0xc1, 0x92, 0xe7, 0xed, 0x4, 0xa3, 0xf9, 0x4b,
	0xce, 0xf9, 0xb6, 0x68, 0x53, 0x18, 0xfa, 0xb7, 0x94, 0xee, 0x63, 0x9e, 0xd6, 0xbc, 0x87, 0x51,
	0xf6, 0xdb, 0x83, 0x89, 0x83, 0x69, 0xb6, 0x5d, 0xcc, 0xcb, 0xb2, 0x38, 0x37, 0xc5, 0x52, 0x92,
	0x4c, 0x38, 0x7b, 0x61, 0xa9, 0x32, 0xe, 0x35, 0xdf, 0xee, 0x76, 0x8f, 0x1, 0x34, 0xef, 0x23,
	0x7, 0xdd, 0x7c, 0xff, 0xd2, 0x5d, 0x9b, 0x89, 0x6c, 0x85, 0x13, 0xe1, 0xe6, 0xe6, 0x7f, 0x12,
	0xd9, 0xaa, 0x85, 0xfe, 0x73, 0xb5, 0x67, 0xbd, 0xda, 0xac, 0xd9, 0x9c, 0x2d, 0x70, 0xe4, 0x2f,
	0xcb, 0xc8, 0x79, 0xd1, 0x78, 0x2d, 0x74, 0x82, 0x4b, 0x7d, 0x3, 0x8f, 0x52, 0x3e, 0x23, 0x11,
	0x71, 0x91, 0x8b, 0x28, 0x86, 0x34, 0x47, 0x35, 0x1c, 0x16, 0x5e, 0xca, 0x2a, 0xb1, 0x97, 0x83,
	0x4, 0x93, 0x5f, 0x47, 0x44, 0x2b, 0xec, 0x2b, 0xf0, 0xcf, 0xe6, 0x66, 0x98, 0xbe, 0x11, 0x2d,
	0x9b, 0xe4, 0x4a, 0x9a, 0xf5, 0x1e, 0x2f, 0x8b, 0x4c, 0xbb, 0xc5, 0xab, 0xc6, 0x18, 0xd7, 0x87,
	0x9e, 0xf9, 0x32, 0xa2, 0x8f, 0x9d, 0xc2, 0xee, 0xaa, 0x12, 0x41, 0x30, 0x76, 0x3e, 0x9e, 0x81,
	0xd, 0xe6, 0x87, 0x32, 0x67, 0x3a, 0xf, 0x25, 0x70, 0x87, 0x14, 0xf8, 0xb1, 0x4, 0xb6, 0xe,
	0x80, 0x2b, 0x7c, 0x77, 0x73, 0x8f, 0xac, 0x93, 0x3e, 0x71, 0x78, 0xe2, 0xbe, 0x1a, 0x51, 0x64,
	0x57, 0x56, 0x68, 0x1a, 0xa3, 0x70, 0xb4, 0xcb, 0x84, 0xb5, 0xab, 0xa, 0x70, 0x85, 0xc3, 0x3,
	0x13, 0xd9, 0x67, 0xc5, 0xa, 0xbf, 0x2, 0x0, 0x0, 0xff, 0xff, 0x34, 0x81, 0xb0, 0x4, 0x2f,
	0x1c, 0x0, 0x0,
}

func init() {
	if file_entity_thrift != nil {
		return
	}
	type x struct{}
	builder := &thrift_reflection.FileDescriptorBuilder{
		Bytes:         file_idl_entity_rawDesc,
		GoTypes:       file_entity_thrift_go_types,
		GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
	}
	file_entity_thrift = thrift_reflection.BuildFileDescriptor(builder)
}

func GetFileDescriptorForEntity() *thrift_reflection.FileDescriptor {
	return file_entity_thrift
}
func (p *_StructOptions) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_entity_thrift.GetStructDescriptor("_StructOptions")
}

func (p *_StructOptions) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "_StructOptions"
	return ret
}
func (p *_FieldOptions) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_entity_thrift.GetStructDescriptor("_FieldOptions")
}

func (p *_FieldOptions) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "_FieldOptions"
	return ret
}
func (p *PersonBasicInfo) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_entity_thrift.GetStructDescriptor("PersonBasicInfo")
}

func (p *PersonBasicInfo) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "PersonBasicInfo"
	return ret
}
func (p *PersonContainerInfo) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_entity_thrift.GetStructDescriptor("PersonContainerInfo")
}

func (p *PersonContainerInfo) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "PersonContainerInfo"
	return ret
}
func (p *PersonStructInfo) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_entity_thrift.GetStructDescriptor("PersonStructInfo")
}

func (p *PersonStructInfo) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "PersonStructInfo"
	return ret
}
func (p *TestStruct) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_entity_thrift.GetStructDescriptor("TestStruct")
}

func (p *TestStruct) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "TestStruct"
	return ret
}
func (p TestEnum) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_entity_thrift.GetEnumDescriptor("TestEnum")
}

func (p *TestEnum) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_entity_thrift.Filepath
	ret.Name = "TestEnum"
	return ret
}
