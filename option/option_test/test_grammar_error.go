// Code generated by thriftgo (0.3.0). DO NOT EDIT.

package option_test

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/thrift_reflection"
)

type PersonA struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewPersonA() *PersonA {
	return &PersonA{}
}

func (p *PersonA) GetName() (v string) {
	return p.Name
}

var fieldIDToName_PersonA = map[int16]string{
	1: "name",
}

func (p *PersonA) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonA[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonA[fieldId]))
}

func (p *PersonA) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PersonA) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonA"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonA) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonA) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonA(%+v)", *p)
}

type PersonB struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewPersonB() *PersonB {
	return &PersonB{}
}

func (p *PersonB) GetName() (v string) {
	return p.Name
}

var fieldIDToName_PersonB = map[int16]string{
	1: "name",
}

func (p *PersonB) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonB[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonB[fieldId]))
}

func (p *PersonB) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PersonB) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonB"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonB) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonB) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonB(%+v)", *p)
}

type PersonC struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewPersonC() *PersonC {
	return &PersonC{}
}

func (p *PersonC) GetName() (v string) {
	return p.Name
}

var fieldIDToName_PersonC = map[int16]string{
	1: "name",
}

func (p *PersonC) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonC[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonC[fieldId]))
}

func (p *PersonC) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PersonC) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonC"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonC) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonC) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonC(%+v)", *p)
}

type PersonD struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewPersonD() *PersonD {
	return &PersonD{}
}

func (p *PersonD) GetName() (v string) {
	return p.Name
}

var fieldIDToName_PersonD = map[int16]string{
	1: "name",
}

func (p *PersonD) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonD[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonD[fieldId]))
}

func (p *PersonD) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PersonD) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonD"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonD) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonD) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonD(%+v)", *p)
}

type PersonE struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewPersonE() *PersonE {
	return &PersonE{}
}

func (p *PersonE) GetName() (v string) {
	return p.Name
}

var fieldIDToName_PersonE = map[int16]string{
	1: "name",
}

func (p *PersonE) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonE[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonE[fieldId]))
}

func (p *PersonE) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PersonE) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonE"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonE) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonE) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonE(%+v)", *p)
}

type PersonF struct {
	Name string `thrift:"name,1,required" json:"name"`
}

func NewPersonF() *PersonF {
	return &PersonF{}
}

func (p *PersonF) GetName() (v string) {
	return p.Name
}

var fieldIDToName_PersonF = map[int16]string{
	1: "name",
}

func (p *PersonF) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PersonF[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_PersonF[fieldId]))
}

func (p *PersonF) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *PersonF) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PersonF"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PersonF) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PersonF) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersonF(%+v)", *p)
}

var file_test_grammar_error_thrift_go_types = []interface{}{
	(*PersonA)(nil), // Struct 0: option_test.PersonA
	(*PersonB)(nil), // Struct 1: option_test.PersonB
	(*PersonC)(nil), // Struct 2: option_test.PersonC
	(*PersonD)(nil), // Struct 3: option_test.PersonD
	(*PersonE)(nil), // Struct 4: option_test.PersonE
	(*PersonF)(nil), // Struct 5: option_test.PersonF
}
var file_idl_test_grammar_error_thrift *thrift_reflection.FileDescriptor
var file_idl_test_grammar_error_rawDesc = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xd4, 0x96, 0xdf, 0x6f, 0xda, 0x3e,
	0x10, 0xc0, 0x8f, 0x96, 0x52, 0xbe, 0x4d, 0x2b, 0xfe, 0x5, 0x2b, 0xfa, 0x4e, 0x3c, 0x2c, 0x6a,
	0x15, 0x60, 0x48, 0xb3, 0x54, 0x69, 0xbf, 0x9f, 0xa7, 0xed, 0x11, 0x21, 0x64, 0xe0, 0x0, 0xab,
	0x8e, 0xcd, 0x1c, 0x53, 0x81, 0x50, 0xfe, 0xa6, 0xbd, 0xed, 0xef, 0x9b, 0xec, 0x84, 0xb6, 0x29,
	0x9, 0x2d, 0x5b, 0x1f, 0x46, 0x5e, 0x2e, 0x39, 0xdf, 0x9d, 0xcf, 0x77, 0x9f, 0x9c, 0xec, 0x41,
	0x5, 0x0, 0xfe, 0x57, 0x73, 0xc3, 0x95, 0x1c, 0xf0, 0xb1, 0xb8, 0x32, 0x18, 0x9b, 0xc1, 0x54,
	0xb3, 0x28, 0x62, 0x7a, 0x80, 0x5a, 0x2b, 0x7d, 0x69, 0x66, 0x9a, 0x4f, 0xcc, 0x5, 0x1c, 0x79,
	0x1e, 0x80, 0x73, 0xa8, 0xa1, 0x34, 0xdc, 0xac, 0x0, 0xe0, 0xf5, 0x3, 0x57, 0x26, 0xa5, 0x32,
	0xcc, 0x7e, 0xc6, 0x57, 0xa9, 0x41, 0x26, 0xee, 0x22, 0x1c, 0xdf, 0x45, 0x38, 0x9a, 0x2a, 0x0,
	0xf0, 0x32, 0x6f, 0xbb, 0x69, 0x3, 0xaa, 0xe7, 0x0, 0x0, 0xd, 0x38, 0xb1, 0xb2, 0xb6, 0x47,
	0x6a, 0x1e, 0x1c, 0x1, 0xc0, 0xe9, 0x57, 0xd4, 0xb1, 0x92, 0xef, 0x1b, 0x70, 0x6c, 0x3, 0x54,
	0xf6, 0xe, 0x50, 0x95, 0x2c, 0xc2, 0x73, 0x38, 0xde, 0xdb, 0xb1, 0x16, 0x1b, 0xcd, 0xe5, 0x14,
	0x3c, 0xa8, 0x2, 0x40, 0xfd, 0x1b, 0xfe, 0x58, 0x70, 0x8d, 0xe3, 0x3a, 0x9c, 0xd8, 0x3c, 0x2e,
	0xe0, 0xd4, 0x6b, 0xd8, 0x93, 0x79, 0x50, 0xb7, 0x2, 0x2e, 0xa0, 0xea, 0x14, 0xae, 0x92, 0xe9,
	0x2e, 0x59, 0x59, 0x2a, 0x27, 0x59, 0xc1, 0xe6, 0xee, 0x28, 0x83, 0xe5, 0x72, 0x39, 0xe0, 0x72,
	0xa2, 0xc8, 0x35, 0x59, 0x9f, 0x91, 0x7, 0xcf, 0x2d, 0x13, 0xb, 0xe4, 0x61, 0x97, 0x86, 0xdd,
	0x2, 0x7d, 0xbb, 0x45, 0xdb, 0xad, 0x2, 0x7d, 0xb7, 0x43, 0xbb, 0x9d, 0x6d, 0x7d, 0x9a, 0x3d,
	0x6d, 0xe2, 0x92, 0x45, 0x73, 0x81, 0xef, 0x30, 0x62, 0x5c, 0x5c, 0x8e, 0x54, 0xd4, 0xdc, 0xb6,
	0x1d, 0xae, 0xc, 0x52, 0x12, 0x16, 0x2c, 0x70, 0xc9, 0xf4, 0x8a, 0x92, 0xb0, 0x60, 0xe3, 0xb1,
	0x5a, 0xc, 0x5, 0xd2, 0xf6, 0x65, 0xd8, 0x9, 0xdf, 0xbc, 0x2d, 0xf0, 0x55, 0x4a, 0x50, 0x62,
	0xf4, 0x2, 0xdd, 0x5a, 0xe2, 0xb9, 0xc2, 0xd9, 0x82, 0xfd, 0x19, 0x2, 0x1f, 0xe, 0x19, 0x81,
	0x4e, 0x1e, 0x81, 0x21, 0x8b, 0xf9, 0xa8, 0x18, 0x82, 0x1c, 0x8, 0x33, 0x14, 0x42, 0xa5, 0x49,
	0x94, 0x18, 0x6d, 0x53, 0xb1, 0x8b, 0x8c, 0x7d, 0xe9, 0xd8, 0x49, 0xc8, 0x53, 0x94, 0x3c, 0x87,
	0x94, 0x32, 0x5a, 0x5e, 0x84, 0x98, 0x8f, 0x7, 0x4c, 0xc, 0xfc, 0xcc, 0x13, 0x13, 0x1b, 0xbd,
	0x18, 0x99, 0x1d, 0x73, 0xc3, 0x8e, 0x15, 0xfa, 0x8, 0x25, 0x7b, 0xa, 0x4a, 0x7c, 0x81, 0xe8,
	0xe7, 0x17, 0xb8, 0x94, 0xa8, 0xbf, 0xbb, 0x90, 0x8f, 0x7d, 0xec, 0xe3, 0x68, 0xa0, 0xbe, 0x54,
	0xe9, 0xdb, 0x23, 0x67, 0x92, 0x9c, 0x6d, 0x7f, 0xfd, 0x75, 0xb3, 0x3e, 0x1d, 0x72, 0xb3, 0x7e,
	0x95, 0x37, 0x8b, 0x16, 0x76, 0xcb, 0x66, 0x16, 0x17, 0xd6, 0xff, 0x90, 0x7a, 0xf6, 0xf9, 0x80,
	0x7b, 0x56, 0x91, 0xf9, 0x9e, 0x8d, 0x94, 0x34, 0x8c, 0x4b, 0xd4, 0x4f, 0x8c, 0xe5, 0x88, 0xcd,
	0xe9, 0x7a, 0xed, 0xcf, 0x70, 0x15, 0xfa, 0xd4, 0x77, 0xaa, 0xd0, 0x4f, 0x8a, 0x6d, 0x5, 0x8f,
	0xd, 0xed, 0xf9, 0x56, 0x84, 0x7e, 0xe0, 0x64, 0xcb, 0xef, 0x97, 0x4c, 0x64, 0xdc, 0x98, 0xb6,
	0x33, 0xd3, 0x4e, 0x99, 0xa9, 0x5d, 0x74, 0xe6, 0x3d, 0x16, 0xc, 0x83, 0x51, 0x3f, 0xe8, 0x8d,
	0x3, 0xc, 0x26, 0xfd, 0xdd, 0xe6, 0x19, 0x6e, 0xbd, 0xde, 0x3a, 0x45, 0x5, 0xc3, 0x24, 0xd8,
	0xbc, 0xb6, 0x92, 0x7e, 0x70, 0xa7, 0x6f, 0xdf, 0xeb, 0x3b, 0x49, 0x59, 0xd0, 0x88, 0xcd, 0x37,
	0xfc, 0xde, 0x84, 0xf4, 0x3e, 0x24, 0xb9, 0x69, 0xd1, 0xfb, 0xa8, 0xc9, 0xcb, 0xd, 0xf3, 0x2f,
	0xff, 0x2a, 0x6b, 0x5, 0xe3, 0xa0, 0x95, 0x47, 0x6b, 0xc2, 0x51, 0x8c, 0x1d, 0x56, 0xd7, 0x4d,
	0x33, 0x43, 0xf7, 0x8b, 0x13, 0x35, 0x21, 0x66, 0xc6, 0x63, 0x92, 0xda, 0x34, 0x9f, 0x31, 0x64,
	0x5e, 0xdd, 0x32, 0xc1, 0xc7, 0xee, 0x2a, 0xfe, 0x60, 0xd0, 0x70, 0x39, 0xdd, 0x10, 0xeb, 0x6e,
	0xb, 0x9b, 0x3a, 0x37, 0xa0, 0x96, 0xdd, 0xbc, 0x4f, 0x33, 0x59, 0xcf, 0xe4, 0x7f, 0x99, 0x3c,
	0x73, 0x12, 0x7e, 0x7, 0x0, 0x0, 0xff, 0xff, 0x11, 0x3b, 0x6f, 0x7c, 0x2e, 0xc, 0x0, 0x0,
}

func init() {
	if file_idl_test_grammar_error_thrift != nil {
		return
	}
	file_idl_test_grammar_error_thrift = thrift_reflection.BuildFileDescriptor(file_idl_test_grammar_error_rawDesc, file_test_grammar_error_thrift_go_types)
}

func GetFileDescriptorForTestGrammarError() *thrift_reflection.FileDescriptor {
	return file_idl_test_grammar_error_thrift
}
func (p *PersonA) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_grammar_error_thrift.GetStructDescriptor("PersonA")
}
func (p *PersonB) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_grammar_error_thrift.GetStructDescriptor("PersonB")
}
func (p *PersonC) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_grammar_error_thrift.GetStructDescriptor("PersonC")
}
func (p *PersonD) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_grammar_error_thrift.GetStructDescriptor("PersonD")
}
func (p *PersonE) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_grammar_error_thrift.GetStructDescriptor("PersonE")
}
func (p *PersonF) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_grammar_error_thrift.GetStructDescriptor("PersonF")
}
