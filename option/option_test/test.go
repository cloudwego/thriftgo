// Code generated by thriftgo (0.3.0). DO NOT EDIT.

package option_test

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/thriftgo/thrift_reflection"
)

type MyEnum int64

const (
	MyEnum_A MyEnum = 0
	MyEnum_B MyEnum = 1
)

func (p MyEnum) String() string {
	switch p {
	case MyEnum_A:
		return "A"
	case MyEnum_B:
		return "B"
	}
	return "<UNSET>"
}

func MyEnumFromString(s string) (MyEnum, error) {
	switch s {
	case "A":
		return MyEnum_A, nil
	case "B":
		return MyEnum_B, nil
	}
	return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

func MyEnumPtr(v MyEnum) *MyEnum { return &v }
func (p *MyEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = MyEnum(result.Int64)
	return
}

func (p *MyEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IDCard struct {
	Number string `thrift:"number,1,required" json:"number"`
	Age    int8   `thrift:"age,2,required" json:"age"`
}

func NewIDCard() *IDCard {
	return &IDCard{}
}

func (p *IDCard) GetNumber() (v string) {
	return p.Number
}

func (p *IDCard) GetAge() (v int8) {
	return p.Age
}

var fieldIDToName_IDCard = map[int16]string{
	1: "number",
	2: "age",
}

func (p *IDCard) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNumber bool = false
	var issetAge bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetNumber = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAge = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNumber {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAge {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IDCard[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_IDCard[fieldId]))
}

func (p *IDCard) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Number = v
	}
	return nil
}

func (p *IDCard) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Age = v
	}
	return nil
}

func (p *IDCard) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IDCard"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IDCard) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("number", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Number); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IDCard) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IDCard) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDCard(%+v)", *p)
}

type Person struct {
	Name string  `thrift:"name,1,required" json:"name"`
	ID   *IDCard `thrift:"id,2,required" json:"id"`
}

func NewPerson() *Person {
	return &Person{}
}

func (p *Person) GetName() (v string) {
	return p.Name
}

var Person_ID_DEFAULT *IDCard

func (p *Person) GetID() (v *IDCard) {
	if !p.IsSetID() {
		return Person_ID_DEFAULT
	}
	return p.ID
}

var fieldIDToName_Person = map[int16]string{
	1: "name",
	2: "id",
}

func (p *Person) IsSetID() bool {
	return p.ID != nil
}

func (p *Person) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Person[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Person[fieldId]))
}

func (p *Person) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *Person) ReadField2(iprot thrift.TProtocol) error {
	p.ID = NewIDCard()
	if err := p.ID.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *Person) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Person"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.ID.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Person) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Person(%+v)", *p)
}

type MyService interface {
	M1(ctx context.Context) (r string, err error)

	M2(ctx context.Context) (r string, err error)
}

type MyServiceClient struct {
	c thrift.TClient
}

func NewMyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MyServiceClient {
	return &MyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MyServiceClient {
	return &MyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMyServiceClient(c thrift.TClient) *MyServiceClient {
	return &MyServiceClient{
		c: c,
	}
}

func (p *MyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MyServiceClient) M1(ctx context.Context) (r string, err error) {
	var _args MyServiceM1Args
	var _result MyServiceM1Result
	if err = p.Client_().Call(ctx, "M1", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MyServiceClient) M2(ctx context.Context) (r string, err error) {
	var _args MyServiceM2Args
	var _result MyServiceM2Result
	if err = p.Client_().Call(ctx, "M2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MyService
}

func (p *MyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMyServiceProcessor(handler MyService) *MyServiceProcessor {
	self := &MyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("M1", &myServiceProcessorM1{handler: handler})
	self.AddToProcessorMap("M2", &myServiceProcessorM2{handler: handler})
	return self
}
func (p *MyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type myServiceProcessorM1 struct {
	handler MyService
}

func (p *myServiceProcessorM1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MyServiceM1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("M1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MyServiceM1Result{}
	var retval string
	if retval, err2 = p.handler.M1(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing M1: "+err2.Error())
		oprot.WriteMessageBegin("M1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("M1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type myServiceProcessorM2 struct {
	handler MyService
}

func (p *myServiceProcessorM2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MyServiceM2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("M2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MyServiceM2Result{}
	var retval string
	if retval, err2 = p.handler.M2(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing M2: "+err2.Error())
		oprot.WriteMessageBegin("M2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("M2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MyServiceM1Args struct {
}

func NewMyServiceM1Args() *MyServiceM1Args {
	return &MyServiceM1Args{}
}

var fieldIDToName_MyServiceM1Args = map[int16]string{}

func (p *MyServiceM1Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM1Args) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("M1_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM1Args(%+v)", *p)
}

type MyServiceM1Result struct {
	Success *string `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewMyServiceM1Result() *MyServiceM1Result {
	return &MyServiceM1Result{}
}

var MyServiceM1Result_Success_DEFAULT string

func (p *MyServiceM1Result) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return MyServiceM1Result_Success_DEFAULT
	}
	return *p.Success
}

var fieldIDToName_MyServiceM1Result = map[int16]string{
	0: "success",
}

func (p *MyServiceM1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceM1Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM1Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM1Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MyServiceM1Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M1_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MyServiceM1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM1Result(%+v)", *p)
}

type MyServiceM2Args struct {
}

func NewMyServiceM2Args() *MyServiceM2Args {
	return &MyServiceM2Args{}
}

var fieldIDToName_MyServiceM2Args = map[int16]string{}

func (p *MyServiceM2Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM2Args) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("M2_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM2Args(%+v)", *p)
}

type MyServiceM2Result struct {
	Success *string `thrift:"success,0,optional" json:"success,omitempty"`
}

func NewMyServiceM2Result() *MyServiceM2Result {
	return &MyServiceM2Result{}
}

var MyServiceM2Result_Success_DEFAULT string

func (p *MyServiceM2Result) GetSuccess() (v string) {
	if !p.IsSetSuccess() {
		return MyServiceM2Result_Success_DEFAULT
	}
	return *p.Success
}

var fieldIDToName_MyServiceM2Result = map[int16]string{
	0: "success",
}

func (p *MyServiceM2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceM2Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MyServiceM2Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MyServiceM2Result) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Success = &v
	}
	return nil
}

func (p *MyServiceM2Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("M2_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MyServiceM2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MyServiceM2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceM2Result(%+v)", *p)
}

var file_test_thrift_go_types = []interface{}{
	(*IDCard)(nil), // Struct 0: option_test.IDCard
	(*Person)(nil), // Struct 1: option_test.Person
	(*MyEnum)(nil), // Enum 0: option_test.MyEnum
}
var file_idl_test_thrift *thrift_reflection.FileDescriptor
var file_idl_test_rawDesc = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xcc, 0x56, 0xdf, 0x6b, 0xeb, 0x36,
	0x14, 0x3e, 0x71, 0xda, 0xdc, 0x36, 0x6e, 0xe9, 0xdb, 0xde, 0x6, 0x9e, 0x61, 0xf4, 0x61, 0xa1,
	0x17, 0xff, 0x68, 0xe8, 0x34, 0xee, 0xd8, 0xee, 0xb6, 0x87, 0xb, 0xcb, 0x7e, 0x5d, 0x18, 0x17,
	0x42, 0x56, 0x94, 0xf8, 0xa4, 0x11, 0xb5, 0xe5, 0xcc, 0x96, 0xc3, 0x42, 0xc8, 0xff, 0x3e, 0x24,
	0xcb, 0x89, 0x1d, 0x3b, 0xc1, 0x81, 0x3d, 0xcc, 0x2f, 0x4a, 0xa4, 0xef, 0xe8, 0x7c, 0xdf, 0xa7,
	0x63, 0xeb, 0x98, 0xd0, 0x1, 0x80, 0xcf, 0xe2, 0xa5, 0x60, 0x31, 0x7f, 0x66, 0x41, 0xf8, 0x56,
	0x60, 0x2a, 0x1e, 0xc4, 0x22, 0x61, 0x73, 0x71, 0xb, 0x86, 0x69, 0x2, 0x80, 0x1, 0x0, 0x3d,
	0xe4, 0x82, 0x89, 0x35, 0x0, 0x7c, 0x55, 0x2, 0x53, 0xce, 0x63, 0x41, 0xe5, 0xdf, 0xf4, 0x6d,
	0xe, 0xd0, 0x83, 0xde, 0x1, 0x0, 0xfa, 0x2b, 0x1a, 0xb2, 0x40, 0x61, 0x0, 0xc0, 0x3b, 0x12,
	0xbc, 0x7, 0x95, 0x7e, 0xee, 0x68, 0x74, 0x15, 0xd, 0xc9, 0xd4, 0x78, 0x89, 0x1, 0xc0, 0xd4,
	0xbb, 0x48, 0xae, 0x77, 0x70, 0x71, 0x23, 0x17, 0x4f, 0x2a, 0x31, 0x95, 0x86, 0xeb, 0xd1, 0xfa,
	0x23, 0x26, 0x2b, 0x36, 0xc3, 0x3b, 0xe8, 0xca, 0x20, 0xa3, 0x45, 0x90, 0x31, 0x72, 0x6e, 0xa0,
	0xdb, 0x2, 0xd8, 0x4b, 0x45, 0xc2, 0xf8, 0xb, 0x68, 0x42, 0x70, 0xb, 0x97, 0xe6, 0x9d, 0xa6,
	0xdd, 0xcb, 0x3, 0xb, 0x15, 0x93, 0x92, 0xc6, 0x8, 0xc5, 0x22, 0xe, 0x9e, 0x19, 0x9f, 0xc7,
	0xd6, 0x3b, 0x6b, 0xd3, 0xb7, 0x4a, 0xf, 0xa7, 0x11, 0x12, 0x6b, 0xa4, 0x10, 0x1f, 0xf8, 0x3c,
	0xfe, 0x85, 0x46, 0x58, 0x5, 0x64, 0xd1, 0x14, 0x13, 0x62, 0x3d, 0x3e, 0x3e, 0xee, 0xe6, 0xb7,
	0x26, 0xf4, 0x64, 0xfe, 0x3b, 0x78, 0xa3, 0x78, 0x18, 0x70, 0x5, 0xd0, 0x4a, 0xa8, 0xfb, 0xff,
	0x17, 0xea, 0xfb, 0xfe, 0x69, 0xa1, 0xb7, 0x70, 0x71, 0x8c, 0xcc, 0xaf, 0x25, 0x32, 0xe9, 0x6a,
	0x56, 0x67, 0x92, 0xb3, 0xd0, 0x25, 0x52, 0xa3, 0x51, 0x50, 0x18, 0xe, 0x87, 0x7d, 0x9d, 0xfe,
	0x12, 0xf2, 0xfc, 0x97, 0x6d, 0x8b, 0xa9, 0xf7, 0xe1, 0xc7, 0x1f, 0x68, 0x12, 0x9c, 0x51, 0x7e,
	0xbd, 0x3c, 0xed, 0x79, 0x27, 0x63, 0xc2, 0x5, 0x0, 0x5c, 0xfd, 0x81, 0x7f, 0x67, 0x2c, 0xc1,
	0xe0, 0x4a, 0x11, 0xed, 0xdc, 0xc2, 0x1b, 0x65, 0xd, 0x98, 0xd2, 0x28, 0x68, 0x55, 0x14, 0x5d,
	0xfa, 0x82, 0xed, 0x72, 0x1b, 0xec, 0xa9, 0x39, 0xaf, 0x51, 0xcb, 0x5b, 0x9c, 0x11, 0x14, 0xe,
	0xb6, 0x91, 0xf6, 0x1b, 0x26, 0x69, 0xcc, 0xcf, 0x70, 0xee, 0x42, 0x1e, 0xe7, 0x7f, 0xe9, 0x5b,
	0x43, 0x49, 0xb9, 0xfa, 0x6b, 0xb7, 0x54, 0xe4, 0x9e, 0xe7, 0xc, 0xc3, 0xbc, 0xc2, 0xdf, 0xdd,
	0x8b, 0x5, 0xaa, 0x82, 0xb2, 0xe2, 0xb9, 0x25, 0x16, 0x2c, 0xb5, 0x72, 0xcc, 0xfd, 0x19, 0xe6,
	0x1b, 0x2c, 0x68, 0xc9, 0x3f, 0x2f, 0xab, 0x73, 0xfd, 0x3f, 0x10, 0x74, 0xd, 0xd0, 0xf9, 0xbc,
	0x2a, 0x68, 0x4a, 0x53, 0xd6, 0xf0, 0xa2, 0xc8, 0x67, 0x45, 0xc3, 0xc, 0xd9, 0x13, 0x79, 0x6a,
	0x98, 0x75, 0x86, 0xc4, 0x19, 0x36, 0xcc, 0x7b, 0x2e, 0xf1, 0xdc, 0x86, 0xf9, 0xa1, 0x4f, 0x86,
	0x7e, 0x7d, 0x3e, 0x3f, 0x15, 0x72, 0x8f, 0xff, 0xd0, 0x68, 0x19, 0xe2, 0x77, 0x18, 0x51, 0x16,
	0x3e, 0xcc, 0xe2, 0xe8, 0xbe, 0x8e, 0x9d, 0xae, 0x5, 0x12, 0xcb, 0x69, 0x58, 0x60, 0x9c, 0x26,
	0x6b, 0x62, 0x39, 0xd, 0x89, 0x83, 0x38, 0x9b, 0x86, 0x48, 0xbc, 0x7, 0xc7, 0x77, 0x1e, 0xbf,
	0x6e, 0x88, 0x8d, 0xe3, 0x90, 0x58, 0x22, 0xc9, 0xf2, 0xaf, 0xc0, 0x16, 0xa0, 0xf3, 0x57, 0xd5,
	0xa0, 0x54, 0x24, 0xd9, 0x4c, 0x9c, 0x70, 0x28, 0x7, 0x90, 0x8d, 0xe2, 0x4e, 0x6c, 0x8c, 0x96,
	0x62, 0x6d, 0xa9, 0x3f, 0xf6, 0xb6, 0x8e, 0x96, 0x27, 0x5b, 0x44, 0x54, 0x56, 0xf5, 0xb7, 0xc9,
	0xe, 0x11, 0xed, 0xea, 0x2, 0xe3, 0x1c, 0x93, 0x8f, 0x8d, 0x31, 0xf2, 0xd1, 0x79, 0x79, 0xac,
	0x93, 0x1e, 0x20, 0xaa, 0x1c, 0x1a, 0x18, 0x21, 0xcf, 0x22, 0x62, 0xbd, 0x3f, 0x26, 0x4c, 0xac,
	0x97, 0x18, 0xe0, 0xbc, 0xad, 0x3e, 0x55, 0x4f, 0x45, 0x8c, 0x65, 0x2f, 0x30, 0xc, 0x63, 0x4b,
	0x2c, 0x30, 0xd1, 0xaa, 0xa4, 0xc3, 0xbf, 0x57, 0x1d, 0x9e, 0xc5, 0x5c, 0x50, 0xc6, 0x31, 0x39,
	0x61, 0x72, 0x44, 0x97, 0x64, 0x63, 0x2f, 0x70, 0xed, 0xd8, 0xc4, 0x56, 0x33, 0x4e, 0x53, 0xf6,
	0x90, 0xa5, 0x82, 0x8c, 0x6d, 0x39, 0x38, 0xf6, 0x40, 0x8d, 0xae, 0x3d, 0x69, 0x90, 0x86, 0x5,
	0xcc, 0xd3, 0x30, 0xbf, 0x9, 0x26, 0x17, 0x14, 0x74, 0x4c, 0x7, 0xd3, 0xc1, 0x6c, 0x32, 0x18,
	0x7, 0x3, 0x1c, 0xcc, 0x27, 0xc7, 0xa1, 0xfa, 0x68, 0xc7, 0x63, 0x6d, 0x17, 0x3a, 0xdb, 0x41,
	0xf1, 0xd3, 0xdd, 0x4e, 0x6, 0xbb, 0x79, 0x6f, 0x3f, 0xef, 0x6f, 0x9b, 0x36, 0x8c, 0xe8, 0xb2,
	0xa8, 0x93, 0x57, 0x87, 0xec, 0xb7, 0xb3, 0x5e, 0x5d, 0xb2, 0xdf, 0x71, 0x5b, 0x98, 0xa, 0x5f,
	0x96, 0xee, 0xbe, 0x7d, 0xe9, 0x32, 0xfe, 0x52, 0xb8, 0xaa, 0x8e, 0x2, 0x0, 0x1e, 0xea, 0xc0,
	0x88, 0x2e, 0x77, 0xde, 0x1f, 0x9a, 0xc, 0x0, 0x5f, 0xd4, 0x23, 0x64, 0xd1, 0x14, 0x21, 0x9f,
	0x3e, 0xfd, 0xc, 0x0, 0x7e, 0x1d, 0x94, 0x7f, 0x5b, 0x74, 0x31, 0x14, 0xe8, 0x4a, 0x49, 0x0,
	0xc0, 0x37, 0x8d, 0xbc, 0xe5, 0x2b, 0x77, 0x10, 0xb8, 0x51, 0x2f, 0x88, 0xae, 0x3f, 0xf9, 0x5b,
	0x71, 0xfb, 0xf6, 0x68, 0x78, 0x80, 0x73, 0x9a, 0x85, 0xe2, 0x59, 0x9, 0xd9, 0x6d, 0xb2, 0x72,
	0x88, 0xbd, 0x72, 0xac, 0xdc, 0x1a, 0xbb, 0x74, 0xc3, 0xf7, 0x6e, 0x4a, 0x9d, 0x46, 0x9b, 0x5e,
	0xb3, 0x37, 0x5a, 0xff, 0xc4, 0xb3, 0xe8, 0x8c, 0xfb, 0xaa, 0xf3, 0x7d, 0x1f, 0xba, 0xa0, 0x9f,
	0x13, 0x6d, 0x4c, 0x50, 0xd2, 0xa4, 0x8c, 0xae, 0x4a, 0x68, 0xe8, 0xab, 0x24, 0x91, 0x3f, 0x25,
	0xe8, 0x64, 0x6b, 0xe5, 0xba, 0x6e, 0xb9, 0xb5, 0x6a, 0x7d, 0x33, 0x77, 0xde, 0xef, 0x79, 0x77,
	0x6a, 0x57, 0xfb, 0x9, 0x21, 0xa3, 0x43, 0x21, 0x47, 0x1a, 0x32, 0x49, 0xff, 0x68, 0x37, 0xe6,
	0x79, 0xde, 0x61, 0x37, 0x76, 0xa5, 0xcf, 0xea, 0x5a, 0x8f, 0x7d, 0x35, 0xc2, 0xbf, 0x1, 0x0,
	0x0, 0xff, 0xff, 0x7, 0x9e, 0x5e, 0x2b, 0xeb, 0xc, 0x0, 0x0,
}

func init() {
	if file_idl_test_thrift != nil {
		return
	}
	file_idl_test_thrift = thrift_reflection.BuildFileDescriptor(file_idl_test_rawDesc, file_test_thrift_go_types)
}

func GetFileDescriptorForTest() *thrift_reflection.FileDescriptor {
	return file_idl_test_thrift
}
func (p *IDCard) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_thrift.GetStructDescriptor("IDCard")
}
func (p *Person) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_idl_test_thrift.GetStructDescriptor("Person")
}
func (p MyEnum) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_idl_test_thrift.GetEnumDescriptor("MyEnum")
}

func GetServiceDescriptorForMyService() *thrift_reflection.ServiceDescriptor {
	return file_idl_test_thrift.GetServiceDescriptor("MyService")
}
func GetMethodDescriptorForMyServiceM1() *thrift_reflection.MethodDescriptor {
	return file_idl_test_thrift.GetMethodDescriptor("MyService", "M1")
}
func GetMethodDescriptorForMyServiceM2() *thrift_reflection.MethodDescriptor {
	return file_idl_test_thrift.GetMethodDescriptor("MyService", "M2")
}
